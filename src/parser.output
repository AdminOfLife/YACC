Terminals unused in grammar

   UNREC


Grammar

    0 $accept: program $end

    1 program: program_head decls compound_stat PERIOD

    2 program_head: PROGRAM ID L_PAREN ID COMMA ID R_PAREN SEMICOLON

    3 decls: const_decl_part type_decl_part var_decl_part proc_decl_part

    4 const_decl_part: CONST const_decl_list SEMICOLON
    5                | /* empty */

    6 const_decl_list: const_decl
    7                | const_decl_list SEMICOLON const_decl

    8 const_decl: ID EQUAL expr

    9 type_decl_part: TYPE type_decl_list SEMICOLON
   10               | /* empty */

   11 type_decl_list: type_decl
   12               | type_decl_list SEMICOLON type_decl

   13 type_decl: ID EQUAL type

   14 type: simple_type
   15     | structured_type

   16 simple_type: scalar_type
   17            | REAL
   18            | ID

   19 scalar_type: L_PAREN scalar_list R_PAREN
   20            | INT
   21            | BOOL
   22            | CHAR

   23 scalar_list: scalar_list COMMA ID
   24            | ID COMMA ID

   25 structured_type: ARRAY LS_BRACKET array_type RS_BRACKET OF type
   26                | RECORD field_list END

   27 array_type: simple_type
   28           | expr RANGE expr

   29 field_list: field
   30           | field_list SEMICOLON field

   31 field: ID COLON type

   32 var_decl_part: VAR var_decl_list SEMICOLON
   33              | /* empty */

   34 var_decl_list: var_decl
   35              | var_decl_list SEMICOLON var_decl

   36 var_decl: ID COLON type
   37         | ID COMMA var_decl

   38 proc_decl_part: proc_decl_list
   39               | /* empty */

   40 proc_decl_list: proc_decl
   41               | proc_decl_list proc_decl

   42 proc_decl: proc_heading decls compound_stat SEMICOLON

   43 proc_heading: PROCEDURE ID f_parm_decl SEMICOLON
   44             | FUNCTION ID f_parm_decl COLON ID SEMICOLON

   45 f_parm_decl: L_PAREN f_parm_list R_PAREN
   46            | L_PAREN R_PAREN

   47 f_parm_list: f_parm
   48            | f_parm_list SEMICOLON f_parm

   49 f_parm: ID COLON ID
   50       | VAR ID COLON ID

   51 compound_stat: _BEGIN stat_list END

   52 stat_list: stat
   53          | stat_list SEMICOLON stat

   54 stat: simple_stat
   55     | struct_stat
   56     | /* empty */

   57 simple_stat: var ASSIGN expr
   58            | proc_invok
   59            | compound_stat

   60 proc_invok: plist_finvok R_PAREN
   61           | ID L_PAREN R_PAREN

   62 var: ID
   63    | var PERIOD ID
   64    | subscripted_var RS_BRACKET

   65 subscripted_var: var LS_BRACKET expr
   66                | subscripted_var COMMA expr

   67 expr: simple_expr
   68     | expr EQUAL simple_expr
   69     | expr NOT_EQUAL simple_expr
   70     | expr LESS_OR_EQUAL simple_expr
   71     | expr LESS simple_expr
   72     | expr GREATER_OR_EQUAL simple_expr
   73     | expr GREATER simple_expr

   74 simple_expr: term
   75            | PLUS term
   76            | MINUS term
   77            | simple_expr PLUS term
   78            | simple_expr MINUS term
   79            | simple_expr OR term

   80 term: factor
   81     | term MULTIPLY factor
   82     | term DIVIDE factor
   83     | term DIV factor
   84     | term MOD factor
   85     | term AND factor

   86 factor: var
   87       | unsigned_const
   88       | L_PAREN expr R_PAREN
   89       | func_invok
   90       | NOT factor

   91 unsigned_const: unsigned_num
   92               | STRING

   93 unsigned_num: INT_CONST
   94             | REAL_CONST

   95 func_invok: plist_finvok R_PAREN
   96           | ID L_PAREN R_PAREN

   97 plist_finvok: ID L_PAREN parm
   98             | plist_finvok COMMA parm

   99 parm: expr

  100 struct_stat: IF expr THEN matched_stat ELSE stat
  101            | IF expr THEN stat
  102            | WHILE expr DO stat
  103            | CONTINUE
  104            | EXIT

  105 matched_stat: simple_stat
  106             | IF expr THEN matched_stat ELSE matched_stat
  107             | WHILE expr DO matched_stat
  108             | CONTINUE
  109             | EXIT


Terminals, with rules where they appear

$end (0) 0
error (256)
BOOL (258) 21
CHAR (259) 22
STRING (260) 92
INT (261) 20
REAL (262) 17
RECORD (263) 26
_BEGIN (264) 51
END (265) 26 51
IF (266) 100 101 106
THEN (267) 100 101 106
ELSE (268) 100 106
WHILE (269) 102 107
DO (270) 102 107
CONTINUE (271) 103 108
EXIT (272) 104 109
OF (273) 25
ID (274) 2 8 13 18 23 24 31 36 37 43 44 49 50 61 62 63 96 97
CONST (275) 4
INT_CONST (276) 93
REAL_CONST (277) 94
PROGRAM (278) 2
TYPE (279) 9
VAR (280) 32 50
ARRAY (281) 25
FUNCTION (282) 44
PROCEDURE (283) 43
L_PAREN (284) 2 19 45 46 61 88 96 97
R_PAREN (285) 2 19 45 46 60 61 88 95 96
LS_BRACKET (286) 25 65
RS_BRACKET (287) 25 64
PERIOD (288) 1 63
COMMA (289) 2 23 24 37 66 98
SEMICOLON (290) 2 4 7 9 12 30 32 35 42 43 44 48 53
COLON (291) 31 36 44 49 50
RANGE (292) 28
ASSIGN (293) 57
UNREC (294)
NOT (295) 90
AND (296) 85
MOD (297) 84
DIV (298) 83
DIVIDE (299) 82
MULTIPLY (300) 81
OR (301) 79
MINUS (302) 76 78
PLUS (303) 75 77
GREATER_OR_EQUAL (304) 72
GREATER (305) 73
LESS_OR_EQUAL (306) 70
LESS (307) 71
NOT_EQUAL (308) 69
EQUAL (309) 8 13 68


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
program (56)
    on left: 1, on right: 0
program_head (57)
    on left: 2, on right: 1
decls (58)
    on left: 3, on right: 1 42
const_decl_part (59)
    on left: 4 5, on right: 3
const_decl_list (60)
    on left: 6 7, on right: 4 7
const_decl (61)
    on left: 8, on right: 6 7
type_decl_part (62)
    on left: 9 10, on right: 3
type_decl_list (63)
    on left: 11 12, on right: 9 12
type_decl (64)
    on left: 13, on right: 11 12
type (65)
    on left: 14 15, on right: 13 25 31 36
simple_type (66)
    on left: 16 17 18, on right: 14 27
scalar_type (67)
    on left: 19 20 21 22, on right: 16
scalar_list (68)
    on left: 23 24, on right: 19 23
structured_type (69)
    on left: 25 26, on right: 15
array_type (70)
    on left: 27 28, on right: 25
field_list (71)
    on left: 29 30, on right: 26 30
field (72)
    on left: 31, on right: 29 30
var_decl_part (73)
    on left: 32 33, on right: 3
var_decl_list (74)
    on left: 34 35, on right: 32 35
var_decl (75)
    on left: 36 37, on right: 34 35 37
proc_decl_part (76)
    on left: 38 39, on right: 3
proc_decl_list (77)
    on left: 40 41, on right: 38 41
proc_decl (78)
    on left: 42, on right: 40 41
proc_heading (79)
    on left: 43 44, on right: 42
f_parm_decl (80)
    on left: 45 46, on right: 43 44
f_parm_list (81)
    on left: 47 48, on right: 45 48
f_parm (82)
    on left: 49 50, on right: 47 48
compound_stat (83)
    on left: 51, on right: 1 42 59
stat_list (84)
    on left: 52 53, on right: 51 53
stat (85)
    on left: 54 55 56, on right: 52 53 100 101 102
simple_stat (86)
    on left: 57 58 59, on right: 54 105
proc_invok (87)
    on left: 60 61, on right: 58
var (88)
    on left: 62 63 64, on right: 57 63 65 86
subscripted_var (89)
    on left: 65 66, on right: 64 66
expr (90)
    on left: 67 68 69 70 71 72 73, on right: 8 28 57 65 66 68 69 70
    71 72 73 88 99 100 101 102 106 107
simple_expr (91)
    on left: 74 75 76 77 78 79, on right: 67 68 69 70 71 72 73 77 78
    79
term (92)
    on left: 80 81 82 83 84 85, on right: 74 75 76 77 78 79 81 82 83
    84 85
factor (93)
    on left: 86 87 88 89 90, on right: 80 81 82 83 84 85 90
unsigned_const (94)
    on left: 91 92, on right: 87
unsigned_num (95)
    on left: 93 94, on right: 91
func_invok (96)
    on left: 95 96, on right: 89
plist_finvok (97)
    on left: 97 98, on right: 60 95 98
parm (98)
    on left: 99, on right: 97 98
struct_stat (99)
    on left: 100 101 102 103 104, on right: 55
matched_stat (100)
    on left: 105 106 107 108 109, on right: 100 106 107


state 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program       go to state 2
    program_head  go to state 3


state 1

    2 program_head: PROGRAM . ID L_PAREN ID COMMA ID R_PAREN SEMICOLON

    ID  shift, and go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

    1 program: program_head . decls compound_stat PERIOD

    CONST  shift, and go to state 6

    $default  reduce using rule 5 (const_decl_part)

    decls            go to state 7
    const_decl_part  go to state 8


state 4

    2 program_head: PROGRAM ID . L_PAREN ID COMMA ID R_PAREN SEMICOLON

    L_PAREN  shift, and go to state 9


state 5

    0 $accept: program $end .

    $default  accept


state 6

    4 const_decl_part: CONST . const_decl_list SEMICOLON

    ID  shift, and go to state 10

    const_decl_list  go to state 11
    const_decl       go to state 12


state 7

    1 program: program_head decls . compound_stat PERIOD

    _BEGIN  shift, and go to state 13

    compound_stat  go to state 14


state 8

    3 decls: const_decl_part . type_decl_part var_decl_part proc_decl_part

    TYPE  shift, and go to state 15

    $default  reduce using rule 10 (type_decl_part)

    type_decl_part  go to state 16


state 9

    2 program_head: PROGRAM ID L_PAREN . ID COMMA ID R_PAREN SEMICOLON

    ID  shift, and go to state 17


state 10

    8 const_decl: ID . EQUAL expr

    EQUAL  shift, and go to state 18


state 11

    4 const_decl_part: CONST const_decl_list . SEMICOLON
    7 const_decl_list: const_decl_list . SEMICOLON const_decl

    SEMICOLON  shift, and go to state 19


state 12

    6 const_decl_list: const_decl .

    $default  reduce using rule 6 (const_decl_list)


state 13

   51 compound_stat: _BEGIN . stat_list END

    _BEGIN    shift, and go to state 13
    IF        shift, and go to state 20
    WHILE     shift, and go to state 21
    CONTINUE  shift, and go to state 22
    EXIT      shift, and go to state 23
    ID        shift, and go to state 24

    $default  reduce using rule 56 (stat)

    compound_stat    go to state 25
    stat_list        go to state 26
    stat             go to state 27
    simple_stat      go to state 28
    proc_invok       go to state 29
    var              go to state 30
    subscripted_var  go to state 31
    plist_finvok     go to state 32
    struct_stat      go to state 33


state 14

    1 program: program_head decls compound_stat . PERIOD

    PERIOD  shift, and go to state 34


state 15

    9 type_decl_part: TYPE . type_decl_list SEMICOLON

    ID  shift, and go to state 35

    type_decl_list  go to state 36
    type_decl       go to state 37


state 16

    3 decls: const_decl_part type_decl_part . var_decl_part proc_decl_part

    VAR  shift, and go to state 38

    $default  reduce using rule 33 (var_decl_part)

    var_decl_part  go to state 39


state 17

    2 program_head: PROGRAM ID L_PAREN ID . COMMA ID R_PAREN SEMICOLON

    COMMA  shift, and go to state 40


state 18

    8 const_decl: ID EQUAL . expr

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 50
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 19

    4 const_decl_part: CONST const_decl_list SEMICOLON .
    7 const_decl_list: const_decl_list SEMICOLON . const_decl

    ID  shift, and go to state 10

    $default  reduce using rule 4 (const_decl_part)

    const_decl  go to state 58


state 20

  100 struct_stat: IF . expr THEN matched_stat ELSE stat
  101            | IF . expr THEN stat

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 59
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 21

  102 struct_stat: WHILE . expr DO stat

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 60
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 22

  103 struct_stat: CONTINUE .

    $default  reduce using rule 103 (struct_stat)


state 23

  104 struct_stat: EXIT .

    $default  reduce using rule 104 (struct_stat)


state 24

   61 proc_invok: ID . L_PAREN R_PAREN
   62 var: ID .
   97 plist_finvok: ID . L_PAREN parm

    L_PAREN  shift, and go to state 61

    $default  reduce using rule 62 (var)


state 25

   59 simple_stat: compound_stat .

    $default  reduce using rule 59 (simple_stat)


state 26

   51 compound_stat: _BEGIN stat_list . END
   53 stat_list: stat_list . SEMICOLON stat

    END        shift, and go to state 62
    SEMICOLON  shift, and go to state 63


state 27

   52 stat_list: stat .

    $default  reduce using rule 52 (stat_list)


state 28

   54 stat: simple_stat .

    $default  reduce using rule 54 (stat)


state 29

   58 simple_stat: proc_invok .

    $default  reduce using rule 58 (simple_stat)


state 30

   57 simple_stat: var . ASSIGN expr
   63 var: var . PERIOD ID
   65 subscripted_var: var . LS_BRACKET expr

    LS_BRACKET  shift, and go to state 64
    PERIOD      shift, and go to state 65
    ASSIGN      shift, and go to state 66


state 31

   64 var: subscripted_var . RS_BRACKET
   66 subscripted_var: subscripted_var . COMMA expr

    RS_BRACKET  shift, and go to state 67
    COMMA       shift, and go to state 68


state 32

   60 proc_invok: plist_finvok . R_PAREN
   98 plist_finvok: plist_finvok . COMMA parm

    R_PAREN  shift, and go to state 69
    COMMA    shift, and go to state 70


state 33

   55 stat: struct_stat .

    $default  reduce using rule 55 (stat)


state 34

    1 program: program_head decls compound_stat PERIOD .

    $default  reduce using rule 1 (program)


state 35

   13 type_decl: ID . EQUAL type

    EQUAL  shift, and go to state 71


state 36

    9 type_decl_part: TYPE type_decl_list . SEMICOLON
   12 type_decl_list: type_decl_list . SEMICOLON type_decl

    SEMICOLON  shift, and go to state 72


state 37

   11 type_decl_list: type_decl .

    $default  reduce using rule 11 (type_decl_list)


state 38

   32 var_decl_part: VAR . var_decl_list SEMICOLON

    ID  shift, and go to state 73

    var_decl_list  go to state 74
    var_decl       go to state 75


state 39

    3 decls: const_decl_part type_decl_part var_decl_part . proc_decl_part

    FUNCTION   shift, and go to state 76
    PROCEDURE  shift, and go to state 77

    $default  reduce using rule 39 (proc_decl_part)

    proc_decl_part  go to state 78
    proc_decl_list  go to state 79
    proc_decl       go to state 80
    proc_heading    go to state 81


state 40

    2 program_head: PROGRAM ID L_PAREN ID COMMA . ID R_PAREN SEMICOLON

    ID  shift, and go to state 82


state 41

   92 unsigned_const: STRING .

    $default  reduce using rule 92 (unsigned_const)


state 42

   62 var: ID .
   96 func_invok: ID . L_PAREN R_PAREN
   97 plist_finvok: ID . L_PAREN parm

    L_PAREN  shift, and go to state 83

    $default  reduce using rule 62 (var)


state 43

   93 unsigned_num: INT_CONST .

    $default  reduce using rule 93 (unsigned_num)


state 44

   94 unsigned_num: REAL_CONST .

    $default  reduce using rule 94 (unsigned_num)


state 45

   88 factor: L_PAREN . expr R_PAREN

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 84
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 46

   90 factor: NOT . factor

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46

    var              go to state 49
    subscripted_var  go to state 31
    factor           go to state 85
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 47

   76 simple_expr: MINUS . term

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46

    var              go to state 49
    subscripted_var  go to state 31
    term             go to state 86
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 48

   75 simple_expr: PLUS . term

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46

    var              go to state 49
    subscripted_var  go to state 31
    term             go to state 87
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 49

   63 var: var . PERIOD ID
   65 subscripted_var: var . LS_BRACKET expr
   86 factor: var .

    LS_BRACKET  shift, and go to state 64
    PERIOD      shift, and go to state 65

    $default  reduce using rule 86 (factor)


state 50

    8 const_decl: ID EQUAL expr .
   68 expr: expr . EQUAL simple_expr
   69     | expr . NOT_EQUAL simple_expr
   70     | expr . LESS_OR_EQUAL simple_expr
   71     | expr . LESS simple_expr
   72     | expr . GREATER_OR_EQUAL simple_expr
   73     | expr . GREATER simple_expr

    GREATER_OR_EQUAL  shift, and go to state 88
    GREATER           shift, and go to state 89
    LESS_OR_EQUAL     shift, and go to state 90
    LESS              shift, and go to state 91
    NOT_EQUAL         shift, and go to state 92
    EQUAL             shift, and go to state 93

    $default  reduce using rule 8 (const_decl)


state 51

   67 expr: simple_expr .
   77 simple_expr: simple_expr . PLUS term
   78            | simple_expr . MINUS term
   79            | simple_expr . OR term

    OR     shift, and go to state 94
    MINUS  shift, and go to state 95
    PLUS   shift, and go to state 96

    $default  reduce using rule 67 (expr)


state 52

   74 simple_expr: term .
   81 term: term . MULTIPLY factor
   82     | term . DIVIDE factor
   83     | term . DIV factor
   84     | term . MOD factor
   85     | term . AND factor

    AND       shift, and go to state 97
    MOD       shift, and go to state 98
    DIV       shift, and go to state 99
    DIVIDE    shift, and go to state 100
    MULTIPLY  shift, and go to state 101

    $default  reduce using rule 74 (simple_expr)


state 53

   80 term: factor .

    $default  reduce using rule 80 (term)


state 54

   87 factor: unsigned_const .

    $default  reduce using rule 87 (factor)


state 55

   91 unsigned_const: unsigned_num .

    $default  reduce using rule 91 (unsigned_const)


state 56

   89 factor: func_invok .

    $default  reduce using rule 89 (factor)


state 57

   95 func_invok: plist_finvok . R_PAREN
   98 plist_finvok: plist_finvok . COMMA parm

    R_PAREN  shift, and go to state 102
    COMMA    shift, and go to state 70


state 58

    7 const_decl_list: const_decl_list SEMICOLON const_decl .

    $default  reduce using rule 7 (const_decl_list)


state 59

   68 expr: expr . EQUAL simple_expr
   69     | expr . NOT_EQUAL simple_expr
   70     | expr . LESS_OR_EQUAL simple_expr
   71     | expr . LESS simple_expr
   72     | expr . GREATER_OR_EQUAL simple_expr
   73     | expr . GREATER simple_expr
  100 struct_stat: IF expr . THEN matched_stat ELSE stat
  101            | IF expr . THEN stat

    THEN              shift, and go to state 103
    GREATER_OR_EQUAL  shift, and go to state 88
    GREATER           shift, and go to state 89
    LESS_OR_EQUAL     shift, and go to state 90
    LESS              shift, and go to state 91
    NOT_EQUAL         shift, and go to state 92
    EQUAL             shift, and go to state 93


state 60

   68 expr: expr . EQUAL simple_expr
   69     | expr . NOT_EQUAL simple_expr
   70     | expr . LESS_OR_EQUAL simple_expr
   71     | expr . LESS simple_expr
   72     | expr . GREATER_OR_EQUAL simple_expr
   73     | expr . GREATER simple_expr
  102 struct_stat: WHILE expr . DO stat

    DO                shift, and go to state 104
    GREATER_OR_EQUAL  shift, and go to state 88
    GREATER           shift, and go to state 89
    LESS_OR_EQUAL     shift, and go to state 90
    LESS              shift, and go to state 91
    NOT_EQUAL         shift, and go to state 92
    EQUAL             shift, and go to state 93


state 61

   61 proc_invok: ID L_PAREN . R_PAREN
   97 plist_finvok: ID L_PAREN . parm

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    R_PAREN     shift, and go to state 105
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 106
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57
    parm             go to state 107


state 62

   51 compound_stat: _BEGIN stat_list END .

    $default  reduce using rule 51 (compound_stat)


state 63

   53 stat_list: stat_list SEMICOLON . stat

    _BEGIN    shift, and go to state 13
    IF        shift, and go to state 20
    WHILE     shift, and go to state 21
    CONTINUE  shift, and go to state 22
    EXIT      shift, and go to state 23
    ID        shift, and go to state 24

    $default  reduce using rule 56 (stat)

    compound_stat    go to state 25
    stat             go to state 108
    simple_stat      go to state 28
    proc_invok       go to state 29
    var              go to state 30
    subscripted_var  go to state 31
    plist_finvok     go to state 32
    struct_stat      go to state 33


state 64

   65 subscripted_var: var LS_BRACKET . expr

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 109
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 65

   63 var: var PERIOD . ID

    ID  shift, and go to state 110


state 66

   57 simple_stat: var ASSIGN . expr

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 111
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 67

   64 var: subscripted_var RS_BRACKET .

    $default  reduce using rule 64 (var)


state 68

   66 subscripted_var: subscripted_var COMMA . expr

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 112
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 69

   60 proc_invok: plist_finvok R_PAREN .

    $default  reduce using rule 60 (proc_invok)


state 70

   98 plist_finvok: plist_finvok COMMA . parm

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 106
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57
    parm             go to state 113


state 71

   13 type_decl: ID EQUAL . type

    BOOL     shift, and go to state 114
    CHAR     shift, and go to state 115
    INT      shift, and go to state 116
    REAL     shift, and go to state 117
    RECORD   shift, and go to state 118
    ID       shift, and go to state 119
    ARRAY    shift, and go to state 120
    L_PAREN  shift, and go to state 121

    type             go to state 122
    simple_type      go to state 123
    scalar_type      go to state 124
    structured_type  go to state 125


state 72

    9 type_decl_part: TYPE type_decl_list SEMICOLON .
   12 type_decl_list: type_decl_list SEMICOLON . type_decl

    ID  shift, and go to state 35

    $default  reduce using rule 9 (type_decl_part)

    type_decl  go to state 126


state 73

   36 var_decl: ID . COLON type
   37         | ID . COMMA var_decl

    COMMA  shift, and go to state 127
    COLON  shift, and go to state 128


state 74

   32 var_decl_part: VAR var_decl_list . SEMICOLON
   35 var_decl_list: var_decl_list . SEMICOLON var_decl

    SEMICOLON  shift, and go to state 129


state 75

   34 var_decl_list: var_decl .

    $default  reduce using rule 34 (var_decl_list)


state 76

   44 proc_heading: FUNCTION . ID f_parm_decl COLON ID SEMICOLON

    ID  shift, and go to state 130


state 77

   43 proc_heading: PROCEDURE . ID f_parm_decl SEMICOLON

    ID  shift, and go to state 131


state 78

    3 decls: const_decl_part type_decl_part var_decl_part proc_decl_part .

    $default  reduce using rule 3 (decls)


state 79

   38 proc_decl_part: proc_decl_list .
   41 proc_decl_list: proc_decl_list . proc_decl

    FUNCTION   shift, and go to state 76
    PROCEDURE  shift, and go to state 77

    $default  reduce using rule 38 (proc_decl_part)

    proc_decl     go to state 132
    proc_heading  go to state 81


state 80

   40 proc_decl_list: proc_decl .

    $default  reduce using rule 40 (proc_decl_list)


state 81

   42 proc_decl: proc_heading . decls compound_stat SEMICOLON

    CONST  shift, and go to state 6

    $default  reduce using rule 5 (const_decl_part)

    decls            go to state 133
    const_decl_part  go to state 8


state 82

    2 program_head: PROGRAM ID L_PAREN ID COMMA ID . R_PAREN SEMICOLON

    R_PAREN  shift, and go to state 134


state 83

   96 func_invok: ID L_PAREN . R_PAREN
   97 plist_finvok: ID L_PAREN . parm

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    R_PAREN     shift, and go to state 135
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 106
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57
    parm             go to state 107


state 84

   68 expr: expr . EQUAL simple_expr
   69     | expr . NOT_EQUAL simple_expr
   70     | expr . LESS_OR_EQUAL simple_expr
   71     | expr . LESS simple_expr
   72     | expr . GREATER_OR_EQUAL simple_expr
   73     | expr . GREATER simple_expr
   88 factor: L_PAREN expr . R_PAREN

    R_PAREN           shift, and go to state 136
    GREATER_OR_EQUAL  shift, and go to state 88
    GREATER           shift, and go to state 89
    LESS_OR_EQUAL     shift, and go to state 90
    LESS              shift, and go to state 91
    NOT_EQUAL         shift, and go to state 92
    EQUAL             shift, and go to state 93


state 85

   90 factor: NOT factor .

    $default  reduce using rule 90 (factor)


state 86

   76 simple_expr: MINUS term .
   81 term: term . MULTIPLY factor
   82     | term . DIVIDE factor
   83     | term . DIV factor
   84     | term . MOD factor
   85     | term . AND factor

    AND       shift, and go to state 97
    MOD       shift, and go to state 98
    DIV       shift, and go to state 99
    DIVIDE    shift, and go to state 100
    MULTIPLY  shift, and go to state 101

    $default  reduce using rule 76 (simple_expr)


state 87

   75 simple_expr: PLUS term .
   81 term: term . MULTIPLY factor
   82     | term . DIVIDE factor
   83     | term . DIV factor
   84     | term . MOD factor
   85     | term . AND factor

    AND       shift, and go to state 97
    MOD       shift, and go to state 98
    DIV       shift, and go to state 99
    DIVIDE    shift, and go to state 100
    MULTIPLY  shift, and go to state 101

    $default  reduce using rule 75 (simple_expr)


state 88

   72 expr: expr GREATER_OR_EQUAL . simple_expr

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    simple_expr      go to state 137
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 89

   73 expr: expr GREATER . simple_expr

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    simple_expr      go to state 138
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 90

   70 expr: expr LESS_OR_EQUAL . simple_expr

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    simple_expr      go to state 139
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 91

   71 expr: expr LESS . simple_expr

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    simple_expr      go to state 140
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 92

   69 expr: expr NOT_EQUAL . simple_expr

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    simple_expr      go to state 141
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 93

   68 expr: expr EQUAL . simple_expr

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    simple_expr      go to state 142
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 94

   79 simple_expr: simple_expr OR . term

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46

    var              go to state 49
    subscripted_var  go to state 31
    term             go to state 143
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 95

   78 simple_expr: simple_expr MINUS . term

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46

    var              go to state 49
    subscripted_var  go to state 31
    term             go to state 144
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 96

   77 simple_expr: simple_expr PLUS . term

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46

    var              go to state 49
    subscripted_var  go to state 31
    term             go to state 145
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 97

   85 term: term AND . factor

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46

    var              go to state 49
    subscripted_var  go to state 31
    factor           go to state 146
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 98

   84 term: term MOD . factor

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46

    var              go to state 49
    subscripted_var  go to state 31
    factor           go to state 147
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 99

   83 term: term DIV . factor

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46

    var              go to state 49
    subscripted_var  go to state 31
    factor           go to state 148
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 100

   82 term: term DIVIDE . factor

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46

    var              go to state 49
    subscripted_var  go to state 31
    factor           go to state 149
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 101

   81 term: term MULTIPLY . factor

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46

    var              go to state 49
    subscripted_var  go to state 31
    factor           go to state 150
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 102

   95 func_invok: plist_finvok R_PAREN .

    $default  reduce using rule 95 (func_invok)


state 103

  100 struct_stat: IF expr THEN . matched_stat ELSE stat
  101            | IF expr THEN . stat

    _BEGIN    shift, and go to state 13
    IF        shift, and go to state 151
    WHILE     shift, and go to state 152
    CONTINUE  shift, and go to state 153
    EXIT      shift, and go to state 154
    ID        shift, and go to state 24

    $default  reduce using rule 56 (stat)

    compound_stat    go to state 25
    stat             go to state 155
    simple_stat      go to state 156
    proc_invok       go to state 29
    var              go to state 30
    subscripted_var  go to state 31
    plist_finvok     go to state 32
    struct_stat      go to state 33
    matched_stat     go to state 157


state 104

  102 struct_stat: WHILE expr DO . stat

    _BEGIN    shift, and go to state 13
    IF        shift, and go to state 20
    WHILE     shift, and go to state 21
    CONTINUE  shift, and go to state 22
    EXIT      shift, and go to state 23
    ID        shift, and go to state 24

    $default  reduce using rule 56 (stat)

    compound_stat    go to state 25
    stat             go to state 158
    simple_stat      go to state 28
    proc_invok       go to state 29
    var              go to state 30
    subscripted_var  go to state 31
    plist_finvok     go to state 32
    struct_stat      go to state 33


state 105

   61 proc_invok: ID L_PAREN R_PAREN .

    $default  reduce using rule 61 (proc_invok)


state 106

   68 expr: expr . EQUAL simple_expr
   69     | expr . NOT_EQUAL simple_expr
   70     | expr . LESS_OR_EQUAL simple_expr
   71     | expr . LESS simple_expr
   72     | expr . GREATER_OR_EQUAL simple_expr
   73     | expr . GREATER simple_expr
   99 parm: expr .

    GREATER_OR_EQUAL  shift, and go to state 88
    GREATER           shift, and go to state 89
    LESS_OR_EQUAL     shift, and go to state 90
    LESS              shift, and go to state 91
    NOT_EQUAL         shift, and go to state 92
    EQUAL             shift, and go to state 93

    $default  reduce using rule 99 (parm)


state 107

   97 plist_finvok: ID L_PAREN parm .

    $default  reduce using rule 97 (plist_finvok)


state 108

   53 stat_list: stat_list SEMICOLON stat .

    $default  reduce using rule 53 (stat_list)


state 109

   65 subscripted_var: var LS_BRACKET expr .
   68 expr: expr . EQUAL simple_expr
   69     | expr . NOT_EQUAL simple_expr
   70     | expr . LESS_OR_EQUAL simple_expr
   71     | expr . LESS simple_expr
   72     | expr . GREATER_OR_EQUAL simple_expr
   73     | expr . GREATER simple_expr

    GREATER_OR_EQUAL  shift, and go to state 88
    GREATER           shift, and go to state 89
    LESS_OR_EQUAL     shift, and go to state 90
    LESS              shift, and go to state 91
    NOT_EQUAL         shift, and go to state 92
    EQUAL             shift, and go to state 93

    $default  reduce using rule 65 (subscripted_var)


state 110

   63 var: var PERIOD ID .

    $default  reduce using rule 63 (var)


state 111

   57 simple_stat: var ASSIGN expr .
   68 expr: expr . EQUAL simple_expr
   69     | expr . NOT_EQUAL simple_expr
   70     | expr . LESS_OR_EQUAL simple_expr
   71     | expr . LESS simple_expr
   72     | expr . GREATER_OR_EQUAL simple_expr
   73     | expr . GREATER simple_expr

    GREATER_OR_EQUAL  shift, and go to state 88
    GREATER           shift, and go to state 89
    LESS_OR_EQUAL     shift, and go to state 90
    LESS              shift, and go to state 91
    NOT_EQUAL         shift, and go to state 92
    EQUAL             shift, and go to state 93

    $default  reduce using rule 57 (simple_stat)


state 112

   66 subscripted_var: subscripted_var COMMA expr .
   68 expr: expr . EQUAL simple_expr
   69     | expr . NOT_EQUAL simple_expr
   70     | expr . LESS_OR_EQUAL simple_expr
   71     | expr . LESS simple_expr
   72     | expr . GREATER_OR_EQUAL simple_expr
   73     | expr . GREATER simple_expr

    GREATER_OR_EQUAL  shift, and go to state 88
    GREATER           shift, and go to state 89
    LESS_OR_EQUAL     shift, and go to state 90
    LESS              shift, and go to state 91
    NOT_EQUAL         shift, and go to state 92
    EQUAL             shift, and go to state 93

    $default  reduce using rule 66 (subscripted_var)


state 113

   98 plist_finvok: plist_finvok COMMA parm .

    $default  reduce using rule 98 (plist_finvok)


state 114

   21 scalar_type: BOOL .

    $default  reduce using rule 21 (scalar_type)


state 115

   22 scalar_type: CHAR .

    $default  reduce using rule 22 (scalar_type)


state 116

   20 scalar_type: INT .

    $default  reduce using rule 20 (scalar_type)


state 117

   17 simple_type: REAL .

    $default  reduce using rule 17 (simple_type)


state 118

   26 structured_type: RECORD . field_list END

    ID  shift, and go to state 159

    field_list  go to state 160
    field       go to state 161


state 119

   18 simple_type: ID .

    $default  reduce using rule 18 (simple_type)


state 120

   25 structured_type: ARRAY . LS_BRACKET array_type RS_BRACKET OF type

    LS_BRACKET  shift, and go to state 162


state 121

   19 scalar_type: L_PAREN . scalar_list R_PAREN

    ID  shift, and go to state 163

    scalar_list  go to state 164


state 122

   13 type_decl: ID EQUAL type .

    $default  reduce using rule 13 (type_decl)


state 123

   14 type: simple_type .

    $default  reduce using rule 14 (type)


state 124

   16 simple_type: scalar_type .

    $default  reduce using rule 16 (simple_type)


state 125

   15 type: structured_type .

    $default  reduce using rule 15 (type)


state 126

   12 type_decl_list: type_decl_list SEMICOLON type_decl .

    $default  reduce using rule 12 (type_decl_list)


state 127

   37 var_decl: ID COMMA . var_decl

    ID  shift, and go to state 73

    var_decl  go to state 165


state 128

   36 var_decl: ID COLON . type

    BOOL     shift, and go to state 114
    CHAR     shift, and go to state 115
    INT      shift, and go to state 116
    REAL     shift, and go to state 117
    RECORD   shift, and go to state 118
    ID       shift, and go to state 119
    ARRAY    shift, and go to state 120
    L_PAREN  shift, and go to state 121

    type             go to state 166
    simple_type      go to state 123
    scalar_type      go to state 124
    structured_type  go to state 125


state 129

   32 var_decl_part: VAR var_decl_list SEMICOLON .
   35 var_decl_list: var_decl_list SEMICOLON . var_decl

    ID  shift, and go to state 73

    $default  reduce using rule 32 (var_decl_part)

    var_decl  go to state 167


state 130

   44 proc_heading: FUNCTION ID . f_parm_decl COLON ID SEMICOLON

    L_PAREN  shift, and go to state 168

    f_parm_decl  go to state 169


state 131

   43 proc_heading: PROCEDURE ID . f_parm_decl SEMICOLON

    L_PAREN  shift, and go to state 168

    f_parm_decl  go to state 170


state 132

   41 proc_decl_list: proc_decl_list proc_decl .

    $default  reduce using rule 41 (proc_decl_list)


state 133

   42 proc_decl: proc_heading decls . compound_stat SEMICOLON

    _BEGIN  shift, and go to state 13

    compound_stat  go to state 171


state 134

    2 program_head: PROGRAM ID L_PAREN ID COMMA ID R_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 172


state 135

   96 func_invok: ID L_PAREN R_PAREN .

    $default  reduce using rule 96 (func_invok)


state 136

   88 factor: L_PAREN expr R_PAREN .

    $default  reduce using rule 88 (factor)


state 137

   72 expr: expr GREATER_OR_EQUAL simple_expr .
   77 simple_expr: simple_expr . PLUS term
   78            | simple_expr . MINUS term
   79            | simple_expr . OR term

    OR     shift, and go to state 94
    MINUS  shift, and go to state 95
    PLUS   shift, and go to state 96

    $default  reduce using rule 72 (expr)


state 138

   73 expr: expr GREATER simple_expr .
   77 simple_expr: simple_expr . PLUS term
   78            | simple_expr . MINUS term
   79            | simple_expr . OR term

    OR     shift, and go to state 94
    MINUS  shift, and go to state 95
    PLUS   shift, and go to state 96

    $default  reduce using rule 73 (expr)


state 139

   70 expr: expr LESS_OR_EQUAL simple_expr .
   77 simple_expr: simple_expr . PLUS term
   78            | simple_expr . MINUS term
   79            | simple_expr . OR term

    OR     shift, and go to state 94
    MINUS  shift, and go to state 95
    PLUS   shift, and go to state 96

    $default  reduce using rule 70 (expr)


state 140

   71 expr: expr LESS simple_expr .
   77 simple_expr: simple_expr . PLUS term
   78            | simple_expr . MINUS term
   79            | simple_expr . OR term

    OR     shift, and go to state 94
    MINUS  shift, and go to state 95
    PLUS   shift, and go to state 96

    $default  reduce using rule 71 (expr)


state 141

   69 expr: expr NOT_EQUAL simple_expr .
   77 simple_expr: simple_expr . PLUS term
   78            | simple_expr . MINUS term
   79            | simple_expr . OR term

    OR     shift, and go to state 94
    MINUS  shift, and go to state 95
    PLUS   shift, and go to state 96

    $default  reduce using rule 69 (expr)


state 142

   68 expr: expr EQUAL simple_expr .
   77 simple_expr: simple_expr . PLUS term
   78            | simple_expr . MINUS term
   79            | simple_expr . OR term

    OR     shift, and go to state 94
    MINUS  shift, and go to state 95
    PLUS   shift, and go to state 96

    $default  reduce using rule 68 (expr)


state 143

   79 simple_expr: simple_expr OR term .
   81 term: term . MULTIPLY factor
   82     | term . DIVIDE factor
   83     | term . DIV factor
   84     | term . MOD factor
   85     | term . AND factor

    AND       shift, and go to state 97
    MOD       shift, and go to state 98
    DIV       shift, and go to state 99
    DIVIDE    shift, and go to state 100
    MULTIPLY  shift, and go to state 101

    $default  reduce using rule 79 (simple_expr)


state 144

   78 simple_expr: simple_expr MINUS term .
   81 term: term . MULTIPLY factor
   82     | term . DIVIDE factor
   83     | term . DIV factor
   84     | term . MOD factor
   85     | term . AND factor

    AND       shift, and go to state 97
    MOD       shift, and go to state 98
    DIV       shift, and go to state 99
    DIVIDE    shift, and go to state 100
    MULTIPLY  shift, and go to state 101

    $default  reduce using rule 78 (simple_expr)


state 145

   77 simple_expr: simple_expr PLUS term .
   81 term: term . MULTIPLY factor
   82     | term . DIVIDE factor
   83     | term . DIV factor
   84     | term . MOD factor
   85     | term . AND factor

    AND       shift, and go to state 97
    MOD       shift, and go to state 98
    DIV       shift, and go to state 99
    DIVIDE    shift, and go to state 100
    MULTIPLY  shift, and go to state 101

    $default  reduce using rule 77 (simple_expr)


state 146

   85 term: term AND factor .

    $default  reduce using rule 85 (term)


state 147

   84 term: term MOD factor .

    $default  reduce using rule 84 (term)


state 148

   83 term: term DIV factor .

    $default  reduce using rule 83 (term)


state 149

   82 term: term DIVIDE factor .

    $default  reduce using rule 82 (term)


state 150

   81 term: term MULTIPLY factor .

    $default  reduce using rule 81 (term)


state 151

  100 struct_stat: IF . expr THEN matched_stat ELSE stat
  101            | IF . expr THEN stat
  106 matched_stat: IF . expr THEN matched_stat ELSE matched_stat

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 173
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 152

  102 struct_stat: WHILE . expr DO stat
  107 matched_stat: WHILE . expr DO matched_stat

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 174
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 153

  103 struct_stat: CONTINUE .
  108 matched_stat: CONTINUE .

    ELSE      reduce using rule 108 (matched_stat)
    $default  reduce using rule 103 (struct_stat)


state 154

  104 struct_stat: EXIT .
  109 matched_stat: EXIT .

    ELSE      reduce using rule 109 (matched_stat)
    $default  reduce using rule 104 (struct_stat)


state 155

  101 struct_stat: IF expr THEN stat .

    $default  reduce using rule 101 (struct_stat)


state 156

   54 stat: simple_stat .
  105 matched_stat: simple_stat .

    ELSE      reduce using rule 105 (matched_stat)
    $default  reduce using rule 54 (stat)


state 157

  100 struct_stat: IF expr THEN matched_stat . ELSE stat

    ELSE  shift, and go to state 175


state 158

  102 struct_stat: WHILE expr DO stat .

    $default  reduce using rule 102 (struct_stat)


state 159

   31 field: ID . COLON type

    COLON  shift, and go to state 176


state 160

   26 structured_type: RECORD field_list . END
   30 field_list: field_list . SEMICOLON field

    END        shift, and go to state 177
    SEMICOLON  shift, and go to state 178


state 161

   29 field_list: field .

    $default  reduce using rule 29 (field_list)


state 162

   25 structured_type: ARRAY LS_BRACKET . array_type RS_BRACKET OF type

    BOOL        shift, and go to state 114
    CHAR        shift, and go to state 115
    STRING      shift, and go to state 41
    INT         shift, and go to state 116
    REAL        shift, and go to state 117
    ID          shift, and go to state 179
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 180
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    simple_type      go to state 181
    scalar_type      go to state 124
    array_type       go to state 182
    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 183
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 163

   24 scalar_list: ID . COMMA ID

    COMMA  shift, and go to state 184


state 164

   19 scalar_type: L_PAREN scalar_list . R_PAREN
   23 scalar_list: scalar_list . COMMA ID

    R_PAREN  shift, and go to state 185
    COMMA    shift, and go to state 186


state 165

   37 var_decl: ID COMMA var_decl .

    $default  reduce using rule 37 (var_decl)


state 166

   36 var_decl: ID COLON type .

    $default  reduce using rule 36 (var_decl)


state 167

   35 var_decl_list: var_decl_list SEMICOLON var_decl .

    $default  reduce using rule 35 (var_decl_list)


state 168

   45 f_parm_decl: L_PAREN . f_parm_list R_PAREN
   46            | L_PAREN . R_PAREN

    ID       shift, and go to state 187
    VAR      shift, and go to state 188
    R_PAREN  shift, and go to state 189

    f_parm_list  go to state 190
    f_parm       go to state 191


state 169

   44 proc_heading: FUNCTION ID f_parm_decl . COLON ID SEMICOLON

    COLON  shift, and go to state 192


state 170

   43 proc_heading: PROCEDURE ID f_parm_decl . SEMICOLON

    SEMICOLON  shift, and go to state 193


state 171

   42 proc_decl: proc_heading decls compound_stat . SEMICOLON

    SEMICOLON  shift, and go to state 194


state 172

    2 program_head: PROGRAM ID L_PAREN ID COMMA ID R_PAREN SEMICOLON .

    $default  reduce using rule 2 (program_head)


state 173

   68 expr: expr . EQUAL simple_expr
   69     | expr . NOT_EQUAL simple_expr
   70     | expr . LESS_OR_EQUAL simple_expr
   71     | expr . LESS simple_expr
   72     | expr . GREATER_OR_EQUAL simple_expr
   73     | expr . GREATER simple_expr
  100 struct_stat: IF expr . THEN matched_stat ELSE stat
  101            | IF expr . THEN stat
  106 matched_stat: IF expr . THEN matched_stat ELSE matched_stat

    THEN              shift, and go to state 195
    GREATER_OR_EQUAL  shift, and go to state 88
    GREATER           shift, and go to state 89
    LESS_OR_EQUAL     shift, and go to state 90
    LESS              shift, and go to state 91
    NOT_EQUAL         shift, and go to state 92
    EQUAL             shift, and go to state 93


state 174

   68 expr: expr . EQUAL simple_expr
   69     | expr . NOT_EQUAL simple_expr
   70     | expr . LESS_OR_EQUAL simple_expr
   71     | expr . LESS simple_expr
   72     | expr . GREATER_OR_EQUAL simple_expr
   73     | expr . GREATER simple_expr
  102 struct_stat: WHILE expr . DO stat
  107 matched_stat: WHILE expr . DO matched_stat

    DO                shift, and go to state 196
    GREATER_OR_EQUAL  shift, and go to state 88
    GREATER           shift, and go to state 89
    LESS_OR_EQUAL     shift, and go to state 90
    LESS              shift, and go to state 91
    NOT_EQUAL         shift, and go to state 92
    EQUAL             shift, and go to state 93


state 175

  100 struct_stat: IF expr THEN matched_stat ELSE . stat

    _BEGIN    shift, and go to state 13
    IF        shift, and go to state 20
    WHILE     shift, and go to state 21
    CONTINUE  shift, and go to state 22
    EXIT      shift, and go to state 23
    ID        shift, and go to state 24

    $default  reduce using rule 56 (stat)

    compound_stat    go to state 25
    stat             go to state 197
    simple_stat      go to state 28
    proc_invok       go to state 29
    var              go to state 30
    subscripted_var  go to state 31
    plist_finvok     go to state 32
    struct_stat      go to state 33


state 176

   31 field: ID COLON . type

    BOOL     shift, and go to state 114
    CHAR     shift, and go to state 115
    INT      shift, and go to state 116
    REAL     shift, and go to state 117
    RECORD   shift, and go to state 118
    ID       shift, and go to state 119
    ARRAY    shift, and go to state 120
    L_PAREN  shift, and go to state 121

    type             go to state 198
    simple_type      go to state 123
    scalar_type      go to state 124
    structured_type  go to state 125


state 177

   26 structured_type: RECORD field_list END .

    $default  reduce using rule 26 (structured_type)


state 178

   30 field_list: field_list SEMICOLON . field

    ID  shift, and go to state 159

    field  go to state 199


state 179

   18 simple_type: ID .
   62 var: ID .
   96 func_invok: ID . L_PAREN R_PAREN
   97 plist_finvok: ID . L_PAREN parm

    L_PAREN  shift, and go to state 83

    RS_BRACKET  reduce using rule 18 (simple_type)
    $default    reduce using rule 62 (var)


state 180

   19 scalar_type: L_PAREN . scalar_list R_PAREN
   88 factor: L_PAREN . expr R_PAREN

    STRING      shift, and go to state 41
    ID          shift, and go to state 200
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    scalar_list      go to state 164
    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 84
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 181

   27 array_type: simple_type .

    $default  reduce using rule 27 (array_type)


state 182

   25 structured_type: ARRAY LS_BRACKET array_type . RS_BRACKET OF type

    RS_BRACKET  shift, and go to state 201


state 183

   28 array_type: expr . RANGE expr
   68 expr: expr . EQUAL simple_expr
   69     | expr . NOT_EQUAL simple_expr
   70     | expr . LESS_OR_EQUAL simple_expr
   71     | expr . LESS simple_expr
   72     | expr . GREATER_OR_EQUAL simple_expr
   73     | expr . GREATER simple_expr

    RANGE             shift, and go to state 202
    GREATER_OR_EQUAL  shift, and go to state 88
    GREATER           shift, and go to state 89
    LESS_OR_EQUAL     shift, and go to state 90
    LESS              shift, and go to state 91
    NOT_EQUAL         shift, and go to state 92
    EQUAL             shift, and go to state 93


state 184

   24 scalar_list: ID COMMA . ID

    ID  shift, and go to state 203


state 185

   19 scalar_type: L_PAREN scalar_list R_PAREN .

    $default  reduce using rule 19 (scalar_type)


state 186

   23 scalar_list: scalar_list COMMA . ID

    ID  shift, and go to state 204


state 187

   49 f_parm: ID . COLON ID

    COLON  shift, and go to state 205


state 188

   50 f_parm: VAR . ID COLON ID

    ID  shift, and go to state 206


state 189

   46 f_parm_decl: L_PAREN R_PAREN .

    $default  reduce using rule 46 (f_parm_decl)


state 190

   45 f_parm_decl: L_PAREN f_parm_list . R_PAREN
   48 f_parm_list: f_parm_list . SEMICOLON f_parm

    R_PAREN    shift, and go to state 207
    SEMICOLON  shift, and go to state 208


state 191

   47 f_parm_list: f_parm .

    $default  reduce using rule 47 (f_parm_list)


state 192

   44 proc_heading: FUNCTION ID f_parm_decl COLON . ID SEMICOLON

    ID  shift, and go to state 209


state 193

   43 proc_heading: PROCEDURE ID f_parm_decl SEMICOLON .

    $default  reduce using rule 43 (proc_heading)


state 194

   42 proc_decl: proc_heading decls compound_stat SEMICOLON .

    $default  reduce using rule 42 (proc_decl)


state 195

  100 struct_stat: IF expr THEN . matched_stat ELSE stat
  101            | IF expr THEN . stat
  106 matched_stat: IF expr THEN . matched_stat ELSE matched_stat

    _BEGIN    shift, and go to state 13
    IF        shift, and go to state 151
    WHILE     shift, and go to state 152
    CONTINUE  shift, and go to state 153
    EXIT      shift, and go to state 154
    ID        shift, and go to state 24

    $default  reduce using rule 56 (stat)

    compound_stat    go to state 25
    stat             go to state 155
    simple_stat      go to state 156
    proc_invok       go to state 29
    var              go to state 30
    subscripted_var  go to state 31
    plist_finvok     go to state 32
    struct_stat      go to state 33
    matched_stat     go to state 210


state 196

  102 struct_stat: WHILE expr DO . stat
  107 matched_stat: WHILE expr DO . matched_stat

    _BEGIN    shift, and go to state 13
    IF        shift, and go to state 151
    WHILE     shift, and go to state 152
    CONTINUE  shift, and go to state 153
    EXIT      shift, and go to state 154
    ID        shift, and go to state 24

    $default  reduce using rule 56 (stat)

    compound_stat    go to state 25
    stat             go to state 158
    simple_stat      go to state 156
    proc_invok       go to state 29
    var              go to state 30
    subscripted_var  go to state 31
    plist_finvok     go to state 32
    struct_stat      go to state 33
    matched_stat     go to state 211


state 197

  100 struct_stat: IF expr THEN matched_stat ELSE stat .

    $default  reduce using rule 100 (struct_stat)


state 198

   31 field: ID COLON type .

    $default  reduce using rule 31 (field)


state 199

   30 field_list: field_list SEMICOLON field .

    $default  reduce using rule 30 (field_list)


state 200

   24 scalar_list: ID . COMMA ID
   62 var: ID .
   96 func_invok: ID . L_PAREN R_PAREN
   97 plist_finvok: ID . L_PAREN parm

    L_PAREN  shift, and go to state 83
    COMMA    shift, and go to state 184

    $default  reduce using rule 62 (var)


state 201

   25 structured_type: ARRAY LS_BRACKET array_type RS_BRACKET . OF type

    OF  shift, and go to state 212


state 202

   28 array_type: expr RANGE . expr

    STRING      shift, and go to state 41
    ID          shift, and go to state 42
    INT_CONST   shift, and go to state 43
    REAL_CONST  shift, and go to state 44
    L_PAREN     shift, and go to state 45
    NOT         shift, and go to state 46
    MINUS       shift, and go to state 47
    PLUS        shift, and go to state 48

    var              go to state 49
    subscripted_var  go to state 31
    expr             go to state 213
    simple_expr      go to state 51
    term             go to state 52
    factor           go to state 53
    unsigned_const   go to state 54
    unsigned_num     go to state 55
    func_invok       go to state 56
    plist_finvok     go to state 57


state 203

   24 scalar_list: ID COMMA ID .

    $default  reduce using rule 24 (scalar_list)


state 204

   23 scalar_list: scalar_list COMMA ID .

    $default  reduce using rule 23 (scalar_list)


state 205

   49 f_parm: ID COLON . ID

    ID  shift, and go to state 214


state 206

   50 f_parm: VAR ID . COLON ID

    COLON  shift, and go to state 215


state 207

   45 f_parm_decl: L_PAREN f_parm_list R_PAREN .

    $default  reduce using rule 45 (f_parm_decl)


state 208

   48 f_parm_list: f_parm_list SEMICOLON . f_parm

    ID   shift, and go to state 187
    VAR  shift, and go to state 188

    f_parm  go to state 216


state 209

   44 proc_heading: FUNCTION ID f_parm_decl COLON ID . SEMICOLON

    SEMICOLON  shift, and go to state 217


state 210

  100 struct_stat: IF expr THEN matched_stat . ELSE stat
  106 matched_stat: IF expr THEN matched_stat . ELSE matched_stat

    ELSE  shift, and go to state 218


state 211

  107 matched_stat: WHILE expr DO matched_stat .

    $default  reduce using rule 107 (matched_stat)


state 212

   25 structured_type: ARRAY LS_BRACKET array_type RS_BRACKET OF . type

    BOOL     shift, and go to state 114
    CHAR     shift, and go to state 115
    INT      shift, and go to state 116
    REAL     shift, and go to state 117
    RECORD   shift, and go to state 118
    ID       shift, and go to state 119
    ARRAY    shift, and go to state 120
    L_PAREN  shift, and go to state 121

    type             go to state 219
    simple_type      go to state 123
    scalar_type      go to state 124
    structured_type  go to state 125


state 213

   28 array_type: expr RANGE expr .
   68 expr: expr . EQUAL simple_expr
   69     | expr . NOT_EQUAL simple_expr
   70     | expr . LESS_OR_EQUAL simple_expr
   71     | expr . LESS simple_expr
   72     | expr . GREATER_OR_EQUAL simple_expr
   73     | expr . GREATER simple_expr

    GREATER_OR_EQUAL  shift, and go to state 88
    GREATER           shift, and go to state 89
    LESS_OR_EQUAL     shift, and go to state 90
    LESS              shift, and go to state 91
    NOT_EQUAL         shift, and go to state 92
    EQUAL             shift, and go to state 93

    $default  reduce using rule 28 (array_type)


state 214

   49 f_parm: ID COLON ID .

    $default  reduce using rule 49 (f_parm)


state 215

   50 f_parm: VAR ID COLON . ID

    ID  shift, and go to state 220


state 216

   48 f_parm_list: f_parm_list SEMICOLON f_parm .

    $default  reduce using rule 48 (f_parm_list)


state 217

   44 proc_heading: FUNCTION ID f_parm_decl COLON ID SEMICOLON .

    $default  reduce using rule 44 (proc_heading)


state 218

  100 struct_stat: IF expr THEN matched_stat ELSE . stat
  106 matched_stat: IF expr THEN matched_stat ELSE . matched_stat

    _BEGIN    shift, and go to state 13
    IF        shift, and go to state 151
    WHILE     shift, and go to state 152
    CONTINUE  shift, and go to state 153
    EXIT      shift, and go to state 154
    ID        shift, and go to state 24

    $default  reduce using rule 56 (stat)

    compound_stat    go to state 25
    stat             go to state 197
    simple_stat      go to state 156
    proc_invok       go to state 29
    var              go to state 30
    subscripted_var  go to state 31
    plist_finvok     go to state 32
    struct_stat      go to state 33
    matched_stat     go to state 221


state 219

   25 structured_type: ARRAY LS_BRACKET array_type RS_BRACKET OF type .

    $default  reduce using rule 25 (structured_type)


state 220

   50 f_parm: VAR ID COLON ID .

    $default  reduce using rule 50 (f_parm)


state 221

  106 matched_stat: IF expr THEN matched_stat ELSE matched_stat .

    $default  reduce using rule 106 (matched_stat)
