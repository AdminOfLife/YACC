###############################################################################
# cos(x) - returns the value of the cosine of x where x is in radians.
# We're going to approximate the value of cosine by calculating "enough" terms
# of its Taylor series.
###############################################################################

__cos_int		PUSH -3[0]	# push x onto stack
			ITOR		# convert to real
			POP -3[0]	# push into param slot
			GOTO __cos_real	# "call" real valued version of cos()

__cos_real		ADJUST 1	# make room for k = summation index
					# in the taylor series for cosine
			CONSTI 6	# We are going to sum the first 6
					# summands
			POP 0[0]

			ADJUST 1	# make room for (-1)^k
			CONSTR 0.0	
			POP 1[0]	# set (-1)^k = 0 for now

			ADJUST 1	# make room for (2k)!
			CONSTR 0.0
			POP 2[0]	# set it to zero for now

			ADJUST 1	# make room for x^(2k) and set to 0
			CONSTR 0.0
			POP 3[0]

			# make room for value of sum so far, set to 0
			ADJUST 1	
			CONSTR 0.0
			POP 4[0]

			GOTO __cos_loop

__cos_loop		PUSH 0[0]	# push k onto stack
			CONSTI -1	# push -1 onto stack
			ADDI		# k <- k-1
			POP 0[0]	# save new value of k
			PUSH 0[0]	# push k onto stack
			CONSTI 0	# push 0 onto stack
			LTI
			IFNZ __cos_done	# k < 0 => we are done
			# else, we calculate the next summand

			#first calculate (-1)^k, make call to __pow_int_int
			CONSTR 0.0	# make room for ret value
			PUSH 0[0]	# push k as second param
			CONSTI -1	# push -1 as first param
			CALL 0, __pow_int_int
			ADJUST -2	# kick params off the stack
			POP 1[0]	# save (-1)^k back into local vars

			#next calculate (2k)!
			CONSTR 0.0	# make room for ret value
			PUSH 0[0]	# push k onto stack
			CONSTI 2	# push 2 onto stack
			MULI		# top of stack <-- 2*k
			CALL 0, __factorial
			ADJUST -1	# kick param off stack
			POP 2[0]	# save (2k)! back into local vars

			# next we calculate x^(2k)
			CONSTR 0.0	# make room for ret value
			PUSH 0[0]	# push k onto stack
			CONSTI 2	# push 2 onto stack
			MULI		# top of stack <-- 2*k
			PUSH -3[0]	# push x onto stack
			CALL 0, __pow_real_int
			ADJUST -2	# kick local vars off the stack
			POP 3[0]	# save val back into local vars

			# we're finally ready to calculate the summand
			PUSH 1[0]	# push (-1)^k
			PUSH 2[0]	# push (2k)!
			DIVR		# top of stack <-- (-1)^k/(2k)!
			PUSH 3[0]	# push x^(2k)
			MULR		# top of stack <-- summand
			PUSH 4[0]	# push sum so far onto stack
			ADDR		# add summand to sum so far
			POP 4[0]	# save sum so far
			GOTO __cos_loop

__cos_done		PUSH 4[0]	# push sum so far onto stack
			POP -4[0]	# save it as ret value
			ADJUST -5	#kick local vars off the stack
			GOTO __cos_ret
__cos_ret		RET 0
