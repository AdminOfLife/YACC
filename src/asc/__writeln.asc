# ASC implementation of writeln.

__writeln_str		ADJUST 1	# make number of args a local param
			PUSH -3[0]
			POP 0[0]
			GOTO __writeln_str_loop
__writeln_str_loop	PUSH 0[0]	# top of stack <-- # left to print
			IFZ __writeln_str_end	# nothing more to print, exit
			# else we have a char to write

			# push &x
			PUSH -4[0]
		
			# push *x onto the stack		
			PUSHI 		
			WRITEC		# write the character
			# decrement # of args
			PUSH 0[0]
			CONSTI -1
			ADDI
			POP 0[0]

			# increment &x
			PUSH -4[0]
			CONSTI 1
			ADDI
			POP -4[0]
			GOTO __writeln_str_loop

__writeln_str_end	ADJUST -1	# kick local vars off the stack
			CONSTI 10	# we're writeln, so we write newchar
					# before we go away
			WRITEC
			RET 0

__writeln_int		PUSH -3[0]
			WRITEI
			CONSTI 10
			WRITEC
			RET 0

__writeln_real		PUSH -3[0]
			WRITER
			CONSTI 10
			WRITEC
			RET 0

