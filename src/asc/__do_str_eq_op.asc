################################################################################
# __do_str_eq_op():
# Given two strings (e.g., array of chars, strings literals are formatted/saved
# such that in these functions the two are indistinguishable), determines
# if they are exactly equal.
# Parameters
#		-3[0] n : the size of strings to be compared
#		-4[0] y : the RHS operand in the equality operation, an address
#		-5[0] x : the LHS operand in the equality operation, an address
################################################################################

__do_str_eq_op
		# nothing to set up, let's get to it

__do_str_eq_loop
			PUSH -3[0]	# push n onto the stack
			IFZ __do_str_eq_true
			# else, we have more comparasons to do
			PUSH -4[0]
			PUSHI
			PUSH -5[0]
			PUSHI
			EQI 
			IFNZ __do_str_eq_false

			# increment &y
			PUSH -4[0]
			CONSTI 1
			ADDI
			POP -4[0]

			# increment &x
			PUSH -5[0]
			CONSTI 1
			ADDI 
			POP -5[0]

			# decrement n
			PUSH -3[0]
			CONSTI -1
			ADDI
			POP -3[0]

			# do next iteration
			goto __do_str_eq_loop

__do_str_eq_true
			CONSTI 1
			POP -5[0]	# save over last param as we
					# have no expectation that caller
					# allocated ret val memory
			GOTO __do_str_eq_ret
__do_str_eq_false
			CONSTI 0
			POP -5[0]

__do_str_eq_ret		RET 0 
				

