# ASC implementation of the function pred()
# From the expression x that shall be of an ordinal-type, this function shall
# return a result that shall be of the same type as that of the expression.
# The function shall yield a value whose ordinal number is one less that that
# of the expression x, if such a value exists.  It shall be an error if such a
# a value does not exist.


# __pred for integers #########################################################
__pred_int		PUSH -3[0]	# push x onto the stack
			# TODO: test if == minint
			CONSTI -1	# push -1 onto stack
			ADDI		# x <-- x-1
			POP -4[0]	# save x-1 as ret value
			RET 0	
__pred_error		# value passed == minint, no predecessor
			STOP


# __pred for booleans #########################################################

__pred_bool		PUSH -3[0]	# push x onto the stack
			CONSTI 1	# push 1 onto the stack
			EQI		# if x != 1, has no predecessor
			IFZ __pred_bool_err
			CONSTI 0	# else, save 0 as ret value
			POP -4[0]
			RET 0

__pred_bool_err		# no predecessor
			STOP

# __pred for scalar enumerations ##############################################

__pred_scalar		PUSH -3[0]	# test if x == 0
			CONSTI 0
			EQI
			IFNZ __pred_scalar_err	# x == 0, error
			PUSH -3[0]	# if not, then decrement and return
			CONSTI -1
			ADDI
			POP -4[0]
			RET 0

__pred_scalar_err	# no predecessor
			STOP

# __pred for chars ############################################################
__pred_char		PUSH -3[0]	# test if x == 0
			CONSTI 0
			EQI
			IFNZ __pred_char_err	# x == 0, error
			PUSH -3[0]	# if not, then decrement and return
			CONSTI -1
			ADDI
			POP -4[0]
			RET 0

__pred_char_err	# no predecessor
			STOP
			
