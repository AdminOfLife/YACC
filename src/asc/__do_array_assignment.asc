###############################################################################
# __do_array_assignment : 
# Given two addresses which reference the base addresses of arrays and the
# size of the arrays (both arrays of the same size), __do_array_assignment
# copies the values from one array into the other. 
# Parameters:
#		-5[0] : &x, the address of the array which is receiving values
#		-4[0] : &y, the address of the array which is assigning values
#		-3[0] : the size of the array
###############################################################################

__do_array_assignment
			ADJUST 1		# make num of chars to read a
						# local variable
			PUSH -3[0]
			POP 0[0]
		
			# 1[0] will be the address to which we are trying
			# to assign a new value
			ADJUST 1
			PUSH -5[0]
			POP 1[0]

			# 2[0] will be the address which stores the value
			# we want to assign to 1[0]
			ADJUST 1
			PUSH -4[0]
			POP 2[0]

__do_loop	
			PUSH 0[0]		# top of stack <-- num of chars
						# left to read
			IFZ __do_done		
			# else, we have more values to assign  
			
			# first push the lastest &x
			PUSH 1[0]
			# push the lastest &y
			PUSH 2[0]
			# replace &y with *y on the stack
			PUSHI
			# store the value *y at &x
			POPI

			# increment the addresses
			PUSH 1[0]
			CONSTI 1
			ADDI
			POP 1[0]

			PUSH 2[0]
			CONSTI 1
			ADDI
			POP 2[0]

			# decrement the counter
			PUSH 0[0]
			CONSTI -1
			ADDI
			POP 0[0]
		# do next iteration
			GOTO __do_loop
__do_done	
			#!D
			# kick local vars off the stack
			ADJUST -3
			# go away
			RET 0

