__ln_int		PUSH -3[0]
			ITOR
			POP -3[0]
			GOTO __ln_real

__ln_real		PUSH -3[0]
			CONSTR 0.0
			EQR
			IFNZ __ln_err
			PUSH -3[0]
			CONSTR 0.0
			LTR
			IFNZ __ln_err
			# x has been validated, let's start calculating
			# ln(x)'s Taylor series
			ADJUST 7	# make room for local vars
			# 0[0] = k -> summation index
			CONSTI 7
			POP 0[0]
			# 0[1] = (-1)^(k+1) 
			CONSTR 0.0
			POP 1[0]
			# 2[0] = (x - 1)^k
			CONSTR 0.0
			POP 2[0]
			# 3[0] = sum so far
			CONSTR 0.0
			POP 3[0]
			# test if x < 1
			PUSH -3[0]
			CONSTR 1.0
			LTR
			IFNZ __ln_increase_arg
			GOTO __ln_reduce_arg
			# offsets 4,5,6 will store m, exp(m) and x*exp(-m) 
			# where m in the smallest integer such that
			# x < exp(m)  

			# x < 1, so we have to bring it back into the range
			# that which we can handle
__ln_increase_arg	CONSTI 0
			POP 4[0]	# our initial guess for -m is 0
			GOTO __ln_increase_aarg_loop


__ln_increase_aarg_loop #!D 
			CONSTI 0	# make room for ret value
			PUSH 4[0]	# push -m onto stack
			CALL 0, __exp_int
			#!D
			ADJUST -1	
			POP 5[0]	# save exp(-m) into the stack
			#!D
			PUSH 5[0]	# push exp(-m)
			PUSH -3[0]	# push x onto stack
			#!D
			LTR		# test x > exp(-m)
			#!D
			IFNZ __ln_loop_prep
			# else decrement m and try again
			PUSH 4[0]
			CONSTI -1
			ADDI
			POP 4[0]
			GOTO __ln_increase_aarg_loop


			# x > 2, so we have to bring it back into the range
			# that we can handle
__ln_reduce_arg		CONSTI 0
			POP 4[0]	# our initial guess for m is 0
			GOTO __ln_reduce_arg_loop

__ln_reduce_arg_loop	CONSTI 0	# make room for ret value
			PUSH 4[0]	# push m onto stack
			CALL 0, __exp_int	# calculate exp(m)
			ADJUST -1	# top of stack <-- exp(m)
			POP 5[0]	# save exp(m) into stack
			PUSH 5[0]	# push exp(m) onto stack
			PUSH -3[0]	# push x onto stack
			GTR		# test x < exp(m)
			IFNZ __ln_loop_prep
			# else increment m and try again
			PUSH 4[0]
			CONSTI 1
			ADDI
			POP 4[0]
			GOTO __ln_reduce_arg_loop

__ln_loop_prep		#!D
			# correct m value found, we calculate x*exp(-m)
			# which the value we use use as y in the expression
			# ln(y) which is calculated by Taylor expansion
			CONSTI 0			
			PUSH 4[0]
			CONSTI -1
			MULI
			CALL 0, __exp_int
			ADJUST -1
			PUSH -3[0]
			MULR
			POP 6[0]
			GOTO __ln_loop
			

__ln_loop		PUSH 0[0]	# push k onto stack and decrement
			CONSTI -1	
			ADDI		# top of stack <- k-1
			POP 0[0]	# save k-1 as new k value
			PUSH 0[0]	# push k onto stack
			CONSTI 0	
			EQI		# test k == 0
			IFNZ __ln_done

			# first calculate (-1)^k+1
			CONSTR 0.0	# make room for return value
			PUSH 0[0]
			CONSTI 1	# top of stack <-- k+1	
			ADDI
			CONSTI -1 
			CALL 0, __pow_int_int
			ADJUST -2	# kick params off stack
			POP 1[0]	# save (-1)^(k+1) back into stack

			# next calculate (x-1)^k
			CONSTR 0.0	# make room for ret
			PUSH 0[0]	# push k
			PUSH 6[0]
			CONSTR -1.0
			ADDR		# top of stack <-- x-1
			CALL 0, __pow_real_int
			ADJUST -2	# kick params off stack
			POP 2[0]	# save value back into stack

			# ready to calculate next summand
			PUSH 1[0]	# push (-1)^(k+1)
			PUSH 0[0]	# push k onto the stack
			ITOR
			DIVR		# top of stack <-- ((-1)^(k+1)) / k
			PUSH 2[0]	# push (x-1)^k onto the stack
			MULR		# top of stack <-- kth summand
			PUSH 3[0]	# push sum so far onto stack
			ADDR
			POP 3[0]	# save kth summand + sum so far
			GOTO __ln_loop

__ln_err		GOTO __arithmetic_error
			STOP

__ln_done		PUSH 3[0]
			PUSH 4[0]
			ITOR
			ADDR
			POP -4[0]	# save sum as return value
			ADJUST -7	# kick local vars off stack
			RET 0




