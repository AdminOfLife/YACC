################################################################################
# ASC implementation of the exponential funcion.
################################################################################

			# if x is an int, we simply raise e to the power x
__exp_int		CONSTI 0		# make room for return value	
			PUSH -3[0]		# push x onto the stack
			CONSTR 2.7182818284	# push ~e onto stack
			CALL 0, __pow_real_int	# raise e to the power x
			ADJUST -2		# kick params off the stack
			POP -4[0]
			RET 0

__exp_real		CONSTI 0
			PUSH -3[0]
			CALL 0, __is_bad_real
			ADJUST -1
			IFNZ __exp_err

			CONSTR 10.0	# if x > 10, call __exp_large_x to 
					# handle it
			PUSH -3[0]
			LTR		# test x > 10.0
			IFNZ __exp_large_x
			ADJUST 4	# make room for k, k!, x^k, and sum
					# so far
			CONSTI 35	# we can only calculate up to 35
					# summands as 36! is not representable
					# in ASC (it is too large)
			POP 0[0]
			CONSTR 0.0
			POP 3[0]
			GOTO __exp_loop


__exp_loop		PUSH 0[0]
			CONSTI -1
			ADDI
			POP 0[0]
			PUSH 0[0]
			CONSTI 0
			LTI
			IFNZ __exp_done
			
			# calculate k!
			CONSTI 0
			PUSH 0[0]
			CALL 0, __factorial
			ADJUST -1
			POP 1[0]

			# calculate x^k
			CONSTI 0
			PUSH 0[0]
			PUSH -3[0]
			CALL 0, __pow_real_int
			ADJUST -2
			POP 2[0]

			# calculate next summand
			PUSH 2[0]
			PUSH 1[0]
			DIVR
			PUSH 3[0]
			ADDR
			POP 3[0]
			GOTO __exp_loop
			

__exp_err		GOTO __arithmetic_error
			STOP

__exp_done		PUSH 3[0]
			POP -4[0]
			ADJUST -4
			RET 0

# If x is particularily large we need a special method to compute its value
# as the method above converges slowly and returns bad resuls for even modest
# values of x (e.g., > 50).
__exp_large_x		ADJUST 4		# make room for n, x-n, e^n, and
						# e^(x-n) 	
			PUSH -3[0]		# push x onto the stack
			RTOI			# truncate it by converting it
						# to an integer
			POP 0[0]		# store n back into stack
			# calculate x-n
			PUSH -3[0]		# push n, x onto the stack
			PUSH 0[0]
			ITOR
			SUBR			# top of stack <-- x-n
			POP 1[0]		# save this value back in stack
			# now we get e^n
			CONSTI 0		# make room for ret value
			PUSH 0[0]
			CALL 0, __exp_int	
			ADJUST -1
			POP 2[0]
					
	
			# now we get e^(x-n)
			CONSTI 0
			PUSH 1[0]
			CALL 0, __exp_real
			ADJUST -1
			POP 3[0]

			# calculate final value
			PUSH 3[0]
			PUSH 2[0]
			MULR
			POP -4[0]
			ADJUST -4
			RET 0
