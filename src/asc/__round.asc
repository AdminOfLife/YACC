# ASC implementation of round()
# From the expression x that shall be of real-type, this function shall return
# a result of integertype.  If x is positive or zero, round(x) shall be 
# equivalent to trunc(x + 0.5) ; otherwise, round(x) shall be equivalent to
# trunc(x - 0.5).  It shall be an error if such a value does not exist.  It
# shall be an error if such a value does not exist.
# TODO: check for error in case of x = inf or x = nan
			GOTO test_start

__round			PUSH -3[0]
			CONSTR 0.0
			GTR
			IFNZ __round_pos
			PUSH -3[0]
			CONSTR 0.0
			EQR
			IFNZ __round_zero
			GOTO __round_neg

__round_pos		CONSTI 0	# make room for ret on stack
			PUSH -3[0]
			CONSTR 0.5	
			ADDR		# x <-- x + 0.5
			CALL 0, __trunc
			ADJUST -1	# kick param off the stack
			POP -4[0]	# make ret val from trunc() our ret val
			__round_ret

__round_zero		CONSTI 0	# x == 0.0, return int 0
			POP -4[0]
			GOTO __round_ret

__round_neg		CONSTI 0	# make room for ret val on stack
			PUSH -3[0]
			CONSTR -0.5
			ADDR
			CALL 0, __trunc
			ADJUST -1	# kick param off the stack
			POP -4[0]	# make ret val from trunc() our ret val
			GOTO __round_ret

__round_ret		RET 0
