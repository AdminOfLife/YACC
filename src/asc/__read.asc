# ASC implementation of read()
# Calling convention:
#	- for ints and real, just push param as usual (i.e., param is the 
#	  address where the value read in is to be placed)
#	- for chars/strs, first param is the number of chars to read (e.g.,
#	  if we want to read(s) where s : array[1..10] of char, then the first
#	  param should be 10 and read() will assume -13[0] is the address
#	  into which to return the first char read (e.g., s[1])
# NOTE: check err flag after reading from input, if it does not get the type
# it is expecting then it is a run time error and the program will halt.
__read_str		ADJUST 1	# make # of chars to read a local var
			PUSH -3[0]	
			POP 0[0]
			GOTO __read_str_loop

__read_str_loop		PUSH 0[0]	# top of stack <-- # char left to read
			IFZ __read_str_done
			# else we have more chars to read
			PUSH 0[0]
			CONSTI -1
			MULI
			CONSTI -3
			ADDI 		# top of stack <- offset to next param
			READC		# get char from stdin
			IFERR __read_str_err 
			POPI 0		# store read char at &x
			# decrement # of chars left to print
			PUSH 0[0]
			CONSTI -1
			ADDI
			POP 0[0]
			GOTO __read_str_loop

__read_str_done		ADJUST -1
			RET 0

__read_str_err		CONSTI 90	# TODO: print real error message
			WRITEC
			STOP



__read_int		PUSH -3[0]	# push &x onto stack
			READI		# read int from stdin
			IFERR __read_int_err
			POPI		# pop value read from stdin to
					# address specified by param
			RET 0		
			

__read_int_err		# TODO: produce error message
			CONSTI 90
			WRITEI
			STOP

__read_real		PUSH -3[0]	# push &x onto stack
			READR		# read real from stdin
			IFERR __read_real_err
			POPI		# pop value read from stdin to addr
					# specified by param
			RET 0		

__read_real_err		STOP 		# TODO print error


