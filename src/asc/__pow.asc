#
# Not a pre-defined function, but a helpful one with calculations used 
# in other pre-defined functions.
# Takes as args x, n (n always int) and return x^n as a real
#
__pow_int_int		PUSH -3[0]	# push x onto stack
			ITOR		# convert it to a real
			POP -3[0]	# place it in param 1 location in stack
			GOTO __pow_real_int

__pow_real_int		PUSH -4[0]	# push n onto stack
			IFZ __pow_zeroexp	# n = 0, return 1
			PUSH -3[0]	# push x onto stack
			IFZ __pow_zerobase
			PUSH -4[0]	# push n onto stack
			CONSTI 0	# test n < 0
			LTI
			IFNZ __pow_neg	# handle special case x < 0
			# else, nonzero base and exp and we have work to do
			ADJUST 1	# make room on stack for tmp
			PUSH -3[0]	# push x onto stack
			POP 0[0]	# store tmp <-- x, tmp will be used
					# as rolling value as we continually
					# multiply x by itself
			GOTO __pow_real_int_loop

__pow_neg		ADJUST 1
			CONSTR 1.0
			PUSH -3[0]
			DIVR
			POP 0[0]
			# now we make n positive for easier looping
			PUSH -4[0]
			CONSTI -1
			MULI
			POP -4[0]
			GOTO __pow_neg_loop

__pow_neg_loop		PUSH -4[0]	# n > 0, so decrement it
			CONSTI -1
			ADDI
			POP -4[0]	# n <-- n - 1
			PUSH -4[0]	#push n onto stack
			IFZ __pow_real_int_done
			PUSH 0[0]	# push tmp onto stack
			PUSH -3[0]	# push onto stack
			DIVR		# top of stack <-- tmp  x
			POP 0[0]	# store result as new tmp
			GOTO __pow_real_int_loop

__pow_neg_done		PUSH 0[0]	# put tmp on top of stack
			POP -5[0]	# save tmp as ret value
			ADJUST -1	# kick local vars off stack
			GOTO __pow_ret

__pow_real_int_loop	PUSH -4[0]	# n > 0, so decrement it
			CONSTI -1
			ADDI
			POP -4[0]	# n <-- n - 1
			PUSH -4[0]	#push n onto stack
			IFZ __pow_real_int_done
			PUSH 0[0]	# push tmp onto stack
			PUSH -3[0]	# push onto stack
			MULR		# top of stack <-- tmp * x
			POP 0[0]	# store result as new tmp
			GOTO __pow_real_int_loop

__pow_real_int_done	PUSH 0[0]	# put tmp on top of stack
			POP -5[0]	# save tmp as ret value
			ADJUST -1	# kick local vars off stack
			GOTO __pow_ret

__pow_zeroexp		CONSTR 1.0	# push 1.0 onto stack
			POP -5[0]	# place 1.0 in ret val location in stack
			GOTO __pow_ret

__pow_zerobase		CONSTR 0.0	# push 0.0 onto stack
			POP -5[0]	# place 0.0 in ret val location in stack
			GOTO __pow_ret

__pow_ret		RET 0

