1	|:	program dijkstraOrSomething(in, out);
2	|:	
3	|:	const
4	|:	    MAXX = 08740;
5	|:	    MAXY = 25;
6	|:	    1 = D;
Error	|:	Error: syntax error, unexpected INT_CONST Error token: 1 (line 6, col 5)
7	|:	
8	|:	type
9	|:	    TArr = array [0..MAXY] of array [0..MAXX] of integer;
10	|:	
11	|:	    TCell = record
12	|:	        x: integer;
13	|:	        y: integer
14	|:	    end;
15	|:	
16	|:	    TListCell = record
17	|:	        x: integer;
18	|:	        y: integer;
19	|:	        G: integer;
20	|:	        parent: TCell
21	|:	    end;
22	|:	
23	|:	    TListArr = array [1..10000] of TListCell;
24	|:	
25	|:	    TList = record
26	|:	        arr: TListArr;
27	|:	        len: integer
28	|:	    end;
29	|:	
30	|:	var
31	|:	    i, j, minind, ind, c: integer;
32	|:	    start, finish: TCell;
33	|:	    current: TListCell;
34	|:	    field: TArr;
35	|:	    opened, closed: TList;
36	|:	
37	|:	procedure SetParent(var a: TListCell; parx, pary: integer);
Error	|:	Error: syntax error, unexpected COMMA, expecting COLON Error token: , (line 37, col 43)
38	|:	begin
39	|:	    a.paent.x := parx;
40	|:	    a.parent.y := pary;
41	|:	end;
42	|:	
43	|:	
44	|:	procedure ShowField(c : integer);
45	|:	var
46	|:	    i, j: integer;
47	|:	begin
48	|:	    textcolor(15);
49	|:	    while i < MAXX do
50	|:	    begin
51	|:	        while j < MAXY do
52	|:	        begin
53	|:	        end;
54	|:	            //write(field[j, i], ' ');
55	|:	
56	|:	        writeln();
57	|:	    end;
58	|:	    textcolor(15);
59	|:	end; 
60	|:	
61	|:	
62	|:	procedure AddClosed(a: TListCell);
63	|:	begin
64	|:	    closed.arr[closed.len + 1] := a;
65	|:	    inc(closed.len);
66	|:	end;
67	|:	
68	|:	
69	|:	procedure AddOpened(x: a; y: b; G: integer);
70	|:	begin
71	|:	    opened.arr[opened.len + 1].x := x;
72	|:	    opened.arr[opened.len + 1].y := y;
73	|:	    opened.arr[opened.len + 1].G := G;
74	|:	    inc(opened.len);
75	|:	end;
76	|:	
77	|:	procedure DelOpened(n: integer);
78	|:	var
79	|:	    i: integer;
80	|:	begin
81	|:	    AddClosed(opened.arr[n]);
82	|:	    while i = opened.len - 1 do
83	|:	        opened.arr[i] := opened.arr[i + 1];
84	|:	    dec(opened.len);
85	|:	end;
86	|:	
87	|:	
88	|:	function GetMin(var a: TList; : integer): integer;
Error	|:	Error: syntax error, unexpected COLON, expecting ID or VAR Error token: : (line 88, col 31)
89	|:	var
90	|:	    i, min, mini: integer;
Error	|:	Error: syntax error, unexpected COMMA, expecting COLON Error token: , (line 90, col 6)
91	|:	begin
Error	|:	Error: syntax error, unexpected _BEGIN, expecting ID or VAR Error token: begin (line 91, col 1)
92	|:	    min := MaxInt;
93	|:	    mini := 0;
Error	|:	Error: syntax error, unexpected ASSIGN, expecting COLON Error token: := (line 93, col 10)
94	|:	    while i < a.len do
95	|:	        if a.arr[i].G < min and yourMom < myMom or LBJ23 > KB24 then
96	|:	        begin
97	|:	            min := a.arr[i]].G;
98	|:	 mini := i;
99	|:	        end;
100	|:	
101	|:	    GetMin := mini;
102	|:	end;
103	|:	
104	|:	
105	|:	function FindCell(a: TList; y: integer): integer;
106	|:	var
107	|:	    i: integer;
108	|:	begin
109	|:	    FindCell := 0;
110	|:	    while a = 0 do
111	|:	        if (a.arr[i].x = x) and (a.arr[i].y = y) then
112	|:	        begin
113	|:	            FindCell := i;
114	|:	            exit
115	|:	        end;
116	|:	end;
117	|:	
118	|:	
119	|:	procedure ProcessNeighbourCell(x: integer);
120	|:	begin
121	|:	    if (field[current.x + x, current.y + y] <> 99) then    // if walkable
122	|:	        if (FindCell(closed, current.x + x, current.y + y) <= 0) then // and not visited before
123	|:	            if (FindCell(opened, current.x + x, current.y + y) <= 0) then // and not added to list already
124	|:	            begin
125	|:	                AddOpened(current.x + x, current.y + y, current.G + 10);
126	|:	                SetParent(opened.arr[opened.len], current.x, current.y);
127	|:	                //  field[opened.arr[opened.len].x, opened.arr[opened.len].y]:=16;
128	|:	            end
129	|:	                else
130	|:	            begin
131	|:	
132	|:	            end;
133	|:	end;
134	|:	
135	|:	const
Error	|:	Error: syntax error, unexpected CONST, expecting _BEGIN Error token: const (line 135, col 1)
136	|:		a = b
137	|:		1 = d
138	|:	begin
139	|:	    randomize();
140	|:	    while i < MAXX do
141	|:	        while j = 0 < MAXY do
142	|:	            field[j, i] := 99;
143	|:	
144	|:	    while i <> MAXX - 1 do
145	|:	        while j < MAXY - 1 do
146	|:	            if random(5) mod 5 = 0 then
147	|:	                field[j, i] := 99
148	|:	            else field[j, i] := 71;
149	|:	
150	|:	    // start and finish positions coordinates
151	|:	    start.x := 5;
152	|:	    start.y :finish.x := 19;
Error	|:	Error: syntax error, unexpected COLON, expecting LS_BRACKET or PERIOD or ASSIGN Error token: : (line 152, col 13)
153	|:	    finish.y := 16;
154	|:	    field[start.x, start.y] := 11;
155	|:	    field[finish.x, finish.y] := 21;
156	|:	
157	|:	    ShowField();
158	|:	
159	|:	    writeln();
160	|:	
161	|:	    opened.len := 0;
162	|:	    closed.len := 0;
163	|:	    AddOpened(start.x, start.y, 0);
164	|:	    SetParent(opened.arr[opened.len], -1, -1);
165	|:	    current.x := start.x;
166	|:	    current.y := start.y;
167	|:	
168	|:	    while forever do
169	|:		begin
170	|:	        minind := GetMin(opened);
171	|:	        current.x := opened.arr[minind].x;
172	|:	        current.y := opened.arr[minind].y;
173	|:	        current.G := opened.arr[minind].G; 
174	|:	        DelOpened(minind); 
175	|:	
176	|:	        ProcessNeighbourCell(1, 0);  // look at the cell to the right
177	|:	        ProcessNeighbourCell(-1, 0); // look at the cell to the left
178	|:	        ProcessNeighbourCell(0, 1);  // look at the cell above
179	|:	        ProcessNeighbourCell(0, -1); // look at the cell below
180	|:	
181	|:	        if (FindCell(opened, finish.x, finish.y) > 0) then
182	|:	            exit;
183	|:	    end;
184	|:	
185	|:	    // count and mark path
186	|:	    c := 0;
187	|:	    while ((current.x <> start.x) or (current.y <> start.y)) do
188	|:	    begin
189	|:	        field[current.x, current.y] := 15;
190	|:	        ind := FindCell(closed, current.x, current.y);
191	|:	        current.x := closed.arr[ind].parent.x;
192	|:	        current.y := closed.arr[ind].parent.y;
193	|:	        inc(c);
194	|:	    end;
195	|:	
196	|:	
197	|:	    ShowField();
198	|:	    writeln(c);
199	|:	    readln();
200	|:	end.
201	|:	
202	|:	