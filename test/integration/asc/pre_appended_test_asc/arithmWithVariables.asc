	# Make room on the stack for new const true.
	ADJUST 1
	# Push const val = 1 on stack, pop it into place.
	CONSTI 1
	POP 0[0]
	# Make room on the stack for new const false.
	ADJUST 1
	# Push const val = 0 on stack, pop it into place.
	CONSTI 0
	POP 1[0]
	# Make room on the stack for new const maxint.
	ADJUST 1
	# Push const val = 2147483647 on stack, pop it into place.
	CONSTI 2147483647
	POP 2[0]

	# #######################################################

	# Start of user program

	# #######################################################

	# End of pre-def, call MAIN
	CALL 1, MAIN_0


###  !!!!!!!!!!!now in lex level 1		

MAIN_0
	#make room for local variables
	ADJUST 1
	ADJUST 1
	ADJUST 1
	ADJUST 1
	ADJUST 1
	ADJUST 1
	ADJUST 1
	ADJUST 1

	GOTO MAIN_1
		
MAIN_1
	#1 a
	PUSHA 2[1]
	CONSTI 10
	POPI

	#2 b
	PUSHA 1[1]
	CONSTI 5
	POPI

	#3 c
	PUSHA 0[1]
	CONSTI 1
	POPI

	#4 x
	PUSHA 5[1]
	CONSTR 10.000000
	POPI

	#5 y
	PUSHA 4[1]
	CONSTR 1.585000
	POPI

	#6 z
	PUSHA 3[1]
	CONSTR 9.369800
	POPI

	#7 i = a + b
	PUSHA 6[1]
	PUSH 2[1]
	PUSH 1[1]
	ADDI
	POPI


	#8 i = a + b +c
	PUSHA 6[1]
	PUSH 2[1]
	PUSH 1[1]
	ADDI 
	PUSH 0[1]
	ADDI 
	POPI

	#9 i = a div b
	PUSHA 6[1]
	PUSH 2[1]
	PUSH 1[1]
	DIVI
	POPI
	#!D

	#10 i = a div b div c
	PUSHA 6[1]
	PUSH 2[1]
	PUSH 1[1]
	DIVI 
	PUSH 0[1]
	DIVI 
	POPI
	#!D

	#11 r = a / b
	PUSHA 7[1]
	PUSH 2[1]
	PUSH 1[1]
	ADJUST -1
	ITOR
	ADJUST 1
	ITOR
	DIVR
	POPI
	#!D

	#12 r = a / b / c
	PUSHA 7[1]
	PUSH 2[1]
	PUSH 1[1]
	ADJUST -1
	ITOR
	ADJUST 1
	ITOR
	DIVR
	PUSH 0[1]
	ITOR
	DIVR
	POPI
	#!D

	#13 i = a *b
	PUSHA 6[1]
	PUSH 2[1]
	PUSH 1[1]
	MULI
	POPI
	#!D

	#14 i = a * b *c
	PUSHA 6[1]
	PUSH 2[1]
	PUSH 1[1]
	MULI
	PUSH 0[1]
	MULI
	POPI
	#!D	

	#15 i = a -b 
	PUSHA 6[1]
	PUSH 2[1]
	PUSH 1[1]
	SUBI
	POPI
	#!D

	#16 i a - b - c
	PUSHA 6[1]
	PUSH 2[1]
	PUSH 1[1]
	SUBI
	PUSH 0[1]
	SUBI
	POPI
	#!D

	#17 r = x + y
	PUSHA 7[1]
	PUSH 5[1]
	PUSH 4[1]
	ADDR
	POPI
	#!D

	#18 r = x + y + z
	PUSHA 7[1]
	PUSH 5[1]
	PUSH 4[1]
	ADDR 
	PUSH 3[1]
	ADDR 
	POPI		
	#!D
	#writer	

	#19 r = x - y
	PUSHA 7[1]
	PUSH 5[1]
	PUSH 4[1]
	SUBR
	POPI
	#!D

	#20 r = x - y - z
	PUSHA 7[1]
	PUSH 5[1]
	PUSH 4[1]
	SUBR 
	PUSH 3[1]
	SUBR 
	POPI	

	#21 r = x / y
	PUSHA 7[1]
	PUSH 5[1]
	PUSH 4[1]
	DIVR
	POPI
	#!D

	#22 r = x / y / z
	PUSHA 7[1]
	PUSH 5[1]
	PUSH 4[1]
	DIVR 
	PUSH 3[1]
	DIVR 
	POPI

	#23 r = x * y
	PUSHA 7[1]
	PUSH 5[1]
	PUSH 4[1]
	MULR 
	POPI
	#!D

	#24 r = x * y * z
	PUSHA 7[1]
	PUSH 5[1]
	PUSH 4[1]
	MULR 
	PUSH 3[1]
	MULR 
	POPI

	#25 i = a mod b
	PUSHA 6[1]
	PUSH 2[1]
	PUSH 1[1]
	MOD
	POPI
	#!D

	#26 i = a mod b mod c
	PUSHA 6[1]
	PUSH 2[1]
	PUSH 1[1]
	MOD
	PUSH 0[1]
	MOD
	POPI

	#27 r = a + x
	PUSHA 7[1]
	PUSH 2[1]
	PUSH 5[1]
	ADJUST -1
	ITOR
	ADJUST 1
	ADDR 
	POPI
	#!D

	#28 r = a + x + a
	PUSHA 7[1]
	PUSH 2[1]
	PUSH 5[1]
	ADJUST -1
	ITOR
	ADJUST 1
	ADDR 
	PUSH 2[1]
	ITOR
	ADDR 
	POPI

	#29 r = a + a + a + a + a 
	PUSHA 7[1]
	PUSH 2[1]
	PUSH 2[1]
	ADDI
	PUSH 2[1]
	ADDI
	PUSH 2[1]
	ADDI
	PUSH 2[1]
	ADDI
	ITOR
	POPI	

	#30 i = -a 
	PUSHA 6[1]
	PUSH 2[1]
	CONSTI -1
	MULI
	POPI

	#31 i = -a + (-a)
	PUSHA 6[1]
	PUSH 2[1]
	CONSTI -1
	MULI	
	PUSH 2[1]
	CONSTI -1
	MULI
	ADDI
	POPI

	#32 i = -a + (+a)
	PUSHA 6[1]
	PUSH 2[1]
	PUSH 2[1]
	CONSTI -1
	MULI
	ADDI
	POPI

	#32 i = +a + (-a)
	PUSHA 6[1]
	PUSH 2[1]
	CONSTI -1
	MULI	
	PUSH 2[1]
	ADDI
	POPI	

	#32 i = +a + (+a) + (+a)
	PUSHA 6[1]
	PUSH 2[1]
	PUSH 2[1]
	PUSH 2[1]
	ADDI
	ADDI
	POPI

	#33 r = -a
	PUSHA 7[1]
	PUSH 2[1]
	CONSTI -1
	MULI	
	ITOR
	POPI

	#33 r = -a + (-a)
	PUSHA 7[1]
	PUSH 2[1]
	CONSTI -1
	MULI
	PUSH 2[1]
	CONSTI -1
	MULI
	ADDI	
	ITOR
	POPI

	#34 r = -a + (+a)
	PUSHA 7[1]
	PUSH 2[1]
	PUSH 2[1]
	CONSTI -1
	MULI
	ADDI	
	ITOR
	POPI	

	STOP





