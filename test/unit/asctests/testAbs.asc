		GOTO testStart

# ASC code for the predefined function abs(x)
# Works as follows: if x < 0, return x * (-1), else return x. 
# __abs_int, __abs_real work for ints and reals respectively

__abs_int	PUSH -3[0]		# push x onto stack
		CONSTI 0		# push 0 onto stack
		LTI			# if x < 0, push 1, else push 0
		IFZ __abs_pos		# x >= 0, just return x
		PUSH -3[0]		# x < 0, push it onto stack
		CONSTI -1		# push -1 onto stack
		MULI			# top of stack <-- x * (-1)
		POP -4[0]		# place x in ret value location in stack
		GOTO __abs_ret

__abs_real	PUSH -3[0]		# push x onto stack
		CONSTR 0.0		# push 0 onto stack
		LTR			# if x < 0 push 1, else push 0
		IFZ __abs_pos		# x >= 0, just return x
		PUSH -3[0]		# if x < 0, push it onto stack
		CONSTR -1.0		# push -1.0 onto stack
		MULR			# top of stack <-- x * (-1.0)
		POP -4[0]		# place x in ret value location in stack
		GOTO __abs_ret

__abs_pos	PUSH -3[0]		# x is positive, push it onto stack
		POP -4[0]		# place x in ret value location in stack
		GOTO __abs_ret	

__abs_ret	RET 0

testStart	ADJUST 1	# make room on stack for test var
		CONSTI 123
		POP 0[0]
		CONSTI 0	# make room for ret value from abs
		PUSH 0[0]	# push param onto stack
		CALL 0, __abs_int
		ADJUST -1	# kick param off the stack
		WRITEI		# write to stdout result from call to
				# abs
		CONSTI 10
		WRITEC

		CONSTI 0
		CONSTI -123
		CALL 0, __abs_int	# call abs(-123)
		
		ADJUST -1	# kick param off the stack
		WRITEI		# write to stdout result from call to
				# abs

		CONSTI 10
		WRITEC


		CONSTI 0
		CONSTR -123423.234789
		CALL 0, __abs_real	# call abs(-123)

		ADJUST -1	# kick param off the stack
		WRITER		# write to stdout result from call to
				# abs

		CONSTI 10
		WRITEC
		STOP
