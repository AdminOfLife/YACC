		GOTO test_start
# ASC implementation of the sqrt() function.
# non-negative square root of x, if x is not negative
# It shall be an error if x is negative.
# The standard specifies that sqrt() accepts both ints and reals, but always returns real.
# The strategy employed follows from en.wikipedia.org/wiki/Square_root
# To find sqrt(x), do:
#	-> start with arbitrary a, set a <-- (a + x/a)
#	-> keep iterating the value of a as give above, apparently you'll eventually get close
__sqrt_int		PUSH -3[0]		# push x onto stack
			ITOR			# convert it to a real
			POP -3[0]
			PUSH -3[0]
			GOTO __sqrt

__sqrt_real		PUSH -3[0]		# push x onto stack
			GOTO __sqrt

__sqrt			CONSTR 0.0		# push 0 onto stack, x now underneath 0
			LTR			# if x < 0 push 1, else push 0
			IFNZ __sqrt_err
						# x >= 0, if it's 0 let's not waste our time
						# computing
			PUSH -3[0]
			CONSTR 0.0
			EQR
			IFNZ __sqrt_ret		# if x == 0, we're done, else x > 0 and
						# we have work to do
			ADJUST 2		# make room for # of iters and a on stack
			CONSTI 10000		
			POP 0[0]		# number of iters <-- 10,000
			PUSH -3[0]
			CONSTR 2.0
			DIVR
			POP 1[0]		# initial guess for a = x / 2
			GOTO __sqrt_loop

__sqrt_loop		PUSH 0[0]		# push number of iters onto stack
			IFZ __sqrt_done		# if == 0, we're done
			PUSH 0[0]
			CONSTI -1
			ADDI			# else, decrement number of iters
			POP 0[0]		# and save it back in its place
			
			PUSH -3[0]		# push x onto stack
			PUSH 1[0]		# push a onto stack
			DIVR			# top of stack <-- x/a
			PUSH 1[0]		# push a onto stack
			ADDR			# top of stack <-- a + (x/a)
			CONSTR 2.0		# push 2.0 onto stack
			DIVR			# top of stack <- (a + (x/a))/2
			POP 1[0]		# a_new <-- stop of stack
			GOTO __sqrt_loop

__sqrt_done		ADJUST -2		# get rid of our local variables
			PUSH 1[0]		# put a onto stack
			GOTO __sqrt_ret

__sqrt_err		# print error message (write script to help do this stuff)
			STOP

__sqrt_ret		POP -4[0]
			RET 0


# Expected output:
# 2.0
# 4.0
# 1.414214
# 488.82293
test_start		ADJUST 1
			CONSTI 0
			CONSTI 4
			CALL 0, __sqrt_int
			ADJUST -1
			WRITER
			CONSTI 10
			WRITEC
			
			# test with i = 16
			CONSTI 0
			CONSTI 16
			CALL 0, __sqrt_int
			ADJUST -1
			WRITER
			CONSTI 10
			WRITEC

			# test with i = 2
			CONSTI 0
			CONSTI 2
			CALL 0, __sqrt_int
			ADJUST -1
			WRITER
			CONSTI 10
			WRITEC

			# test with r = 238947.2342
			# desktop calculator gives answer as 488.822293068
			CONSTI 0
			CONSTR 238947.2342
			CALL 0, __sqrt_real
			ADJUST -1
			WRITER
			CONSTI 10
			WRITEC

			STOP

