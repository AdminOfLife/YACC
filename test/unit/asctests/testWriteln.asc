# ASC implementation of write().
# HOW TO CALL:
#	-> For ints/reals, simply push param as usual and call.
#	-> For chrs/string, push number of chars to print as first param
#	    (i.e., at -3[0]), for the rest make ith char to print the ith param.

			GOTO test_start
__write_str		ADJUST 1	# make number of args a local param
			PUSH -3[0]
			POP 0[0]
			GOTO __write_str_loop
__write_str_loop	PUSH 0[0]	# top of stack <-- # left to print
			IFZ __write_str_end	# nothing more to print, exit
			# else we have a char to write
			# start by calculating depth of 0[0]th param
			PUSH 0[0]
			CONSTI -1
			MULI		
			CONSTI -3
			ADDI
			PUSHI 0		# push next char onto stack
			WRITEC		# write the character
			# decrement # of args
			PUSH 0[0]
			CONSTI -1
			ADDI
			POP 0[0]
			GOTO __write_str_loop
__write_str_end		ADJUST -1	# kick local vars off the stack
			RET 0

__writeln_str		ADJUST 1	# make number of args a local param
			PUSH -3[0]
			POP 0[0]
			GOTO __writeln_str_loop
__writeln_str_loop	PUSH 0[0]	# top of stack <-- # left to print
			IFZ __writeln_str_end	# nothing more to print, exit
			# else we have a char to write
			# start by calculating depth of 0[0]th param
			PUSH 0[0]
			CONSTI -1
			MULI		
			CONSTI -3
			ADDI
			PUSHI 0		# push next char onto stack
			WRITEC		# write the character
			# decrement # of args
			PUSH 0[0]
			CONSTI -1
			ADDI
			POP 0[0]
			GOTO __writeln_str_loop
__writeln_str_end	ADJUST -1	# kick local vars off the stack
			CONSTI 10	# we're writeln, so we write newchar
					# before we go away
			WRITEC
			RET 0
test_start		CONSTI 0
			CONSTI 0
			CONSTI 90
			CONSTI 84
			CONSTI 38
			CONSTI 90
			CONSTI 84
			CONSTI 38
			CONSTI 90
			CONSTI 84
			CONSTI 38
			CONSTI 90
			CONSTI 84
			CONSTI 38
			CONSTI 90
			CONSTI 84
			CONSTI 38
			CONSTI 15
			CALL 0, __writeln_str
			STOP
			
