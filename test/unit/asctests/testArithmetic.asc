# Blobbing the harder arithmetic functions together because they require
# the same helper functions.  This will be separated once the test runner
# is working properly.


# Helper function: takes int/real x as first param, int n as second, returns x^n
# TODO: in the future consider making the the O(lg(n)) version of exponentiation
# TODO: test for |x^n| > maxint, throw runtime error if that is the case
			GOTO test_start
__pow_int_int		PUSH -3[0]	# push x onto stack
			ITOR		# convert it to a real
			POP -3[0]	# place it in param 1 location in stack
			GOTO __pow_real_int

__pow_real_int		PUSH -4[0]	# push n onto stack
			IFZ __pow_zeroexp	# n = 0, return 1
			PUSH -3[0]	# push x onto stack
			IFZ __pow_zerobase
			# else, nonzero base and exp and we have work to do
			ADJUST 1	# make room on stack for tmp
			PUSH -3[0]	# push x onto stack
			POP 0[0]	# store tmp <-- x, tmp will be used
					# as rolling value as we continually
					# multiply x by itself


__pow_real_int_loop	PUSH -4[0]	# n > 0, so decrement it
			CONSTI -1
			ADDI
			POP -4[0]	# n <-- n - 1
			PUSH -4[0]	#push n onto stack
			IFZ __pow_real_int_done
			PUSH 0[0]	# push tmp onto stack
			PUSH -3[0]	# push onto stack
			MULR		# top of stack <-- tmp * x
			POP 0[0]	# store result as new tmp
			GOTO __pow_real_int_loop

__pow_real_int_done	PUSH 0[0]	# put tmp on top of stack
			POP -5[0]	# save tmp as ret value
			ADJUST -1	# kick local vars off stack
			GOTO __pow_ret

__pow_zeroexp		CONSTR 1.0	# push 1.0 onto stack
			POP -5[0]	# place 1.0 in ret val location in stack
			GOTO __pow_ret

__pow_zerobase		CONSTR 0.0	# push 0.0 onto stack
			POP -5[0]	# place 0.0 in ret val location in stack
			GOTO __pow_ret

__pow_ret		RET 0

###############################################################################
# factorial(n) - returns n! (useful in calculating values of trig functions)
# --> returns the n! as a real such that we can express larger factorial values
###############################################################################
__factorial		ADJUST 1	# make room for local var tmp
			PUSH -3[0]	# push n onto stack
			IFZ __factorial_zero #handle special case n = 0
			PUSH -3[0]	# push n onto stack
			ITOR		# make n a real
			POP -3[0]	# save n as a real
			PUSH -3[0]	# put n onto stack
			POP 0[0]	# tmp <-- n
			GOTO __factorial_loop

__factorial_zero	CONSTR 1.0
			POP 0[0]
			GOTO __factorial_done

__factorial_loop	PUSH -3[0]	# push n onto stack
			CONSTR -1.0	# push -1 onto stack
			ADDR		# top of stack <-- n - 1
			POP -3[0]	# n <-- n - 1
			PUSH -3[0]	# push n-1 onto stack
			IFZ __factorial_done
			PUSH -3[0]	# push n-1 onto stack
			PUSH 0[0]	# push tmp onto stack
			MULR		# top of stack <-- tmp * (n - 1)
			# TODO: add test for > maxint, set run-time error 
			POP 0[0]	# tmp <-- tmp * (n - 1)
			GOTO __factorial_loop


__factorial_done	PUSH 0[0]	# push tmp onto stack
			POP -4[0]	# save tmp as ret value
			ADJUST -1	# kick local vars off stack
			GOTO __factorial_ret

__factorial_ret		RET 0

###############################################################################
# sin(x) - returns the value of the sine of x where x is in radians.
# We're going to approximate the value of sine by calculating "enough" terms
# of its Taylor series.
###############################################################################

__sin_int		PUSH -3[0]	# push x onto stack
			ITOR		# conver to real
			POP -3[0]	# push into param slot
			GOTO __sin_real	# "call" real valued version of sin()

__sin_real		ADJUST 1	# make room for k = summation index
					# in the taylor series for sine
			CONSTI 6	# We are going to sum the first 6
					# series
			POP 0[0]

			ADJUST 1	# make room for (-1)^k
			CONSTR 0.0	
			POP 1[0]	# set (-1)^k = 0 for now

			ADJUST 1	# make room for (2k + 1)!
			CONSTR 0.0
			POP 2[0]	# set it to zero for now

			ADJUST 1	# make room for x^(2k+1) and set to 0
			CONSTR 0.0
			POP 3[0]

			# make room for value of sum so far, set to 0
			ADJUST 1	
			CONSTR 0.0
			POP 4[0]

			GOTO __sin_loop

__sin_loop		PUSH 0[0]	# push k onto stack
			CONSTI -1	# push -1 onto stack
			ADDI		# k <- k-1
			POP 0[0]	# save new value of k
			PUSH 0[0]	# push k onto stack
			CONSTI 0	# push 0 onto stack
			LTI
			IFNZ __sin_done	# k < 0 => we are done
			# else, we calculate the next summand

			#first calculate (-1)^k, make call to __pow_int_int
			CONSTR 0.0	# make room for ret value
			PUSH 0[0]	# push k as second param
			CONSTI -1	# push -1 as first param
			CALL 0, __pow_int_int
			ADJUST -2	# kick params off the stack
			POP 1[0]	# save (-1)^k back into local vars

			#next calculate (2k + 1)!
			CONSTR 0.0	# make room for ret value
			PUSH 0[0]	# push k onto stack
			CONSTI 2	# push 2 onto stack
			MULI		# top of stack <-- 2*k
			CONSTI 1	# push 1 onto stack
			ADDI		# top of stack <-- 2*k + 1
			CALL 0, __factorial
			ADJUST -1	# kick param off stack
			POP 2[0]	# save (2k+1)! back into local vars

			# next we calculate x^(2k+1)
			CONSTR 0.0	# make room for ret value
			PUSH 0[0]	# push k onto stack
			CONSTI 2	# push 2 onto stack
			MULI		# top of stack <-- 2*k
			CONSTI 1	# push 1 onto stack
			ADDI		# top of stack <-- 2k+1
			PUSH -3[0]	# push x onto stack
			CALL 0, __pow_real_int
			ADJUST -2	# kick local vars off the stack
			POP 3[0]	# save val back into local vars

			# we're finally ready to calculate the summand
			PUSH 1[0]	# push (-1)^k
			PUSH 2[0]	# push (2k + 1)!
			DIVR		# top of stack <-- (-1)^k/(2k+1)!
			PUSH 3[0]	# push x^(2k+1)
			MULR		# top of stack <-- summand
			PUSH 4[0]	# push sum so far onto stack
			ADDR		# add summand to sum so far
			POP 4[0]	# save sum so far
			GOTO __sin_loop

__sin_done		PUSH 4[0]	# push sum so far onto stack
			POP -4[0]	# save it as ret value
			ADJUST -5	#kick local vars off the stack
			GOTO __sin_ret
__sin_ret		RET 0


###############################################################################
# cos(x) - returns the value of the cosine of x where x is in radians.
# We're going to approximate the value of cosine by calculating "enough" terms
# of its Taylor series.
###############################################################################

__cos_int		PUSH -3[0]	# push x onto stack
			ITOR		# convert to real
			POP -3[0]	# push into param slot
			GOTO __cos_real	# "call" real valued version of cos()

__cos_real		ADJUST 1	# make room for k = summation index
					# in the taylor series for cosine
			CONSTI 6	# We are going to sum the first 6
					# summands
			POP 0[0]

			ADJUST 1	# make room for (-1)^k
			CONSTR 0.0	
			POP 1[0]	# set (-1)^k = 0 for now

			ADJUST 1	# make room for (2k)!
			CONSTR 0.0
			POP 2[0]	# set it to zero for now

			ADJUST 1	# make room for x^(2k) and set to 0
			CONSTR 0.0
			POP 3[0]

			# make room for value of sum so far, set to 0
			ADJUST 1	
			CONSTR 0.0
			POP 4[0]

			GOTO __cos_loop

__cos_loop		PUSH 0[0]	# push k onto stack
			CONSTI -1	# push -1 onto stack
			ADDI		# k <- k-1
			POP 0[0]	# save new value of k
			PUSH 0[0]	# push k onto stack
			CONSTI 0	# push 0 onto stack
			LTI
			IFNZ __cos_done	# k < 0 => we are done
			# else, we calculate the next summand

			#first calculate (-1)^k, make call to __pow_int_int
			CONSTR 0.0	# make room for ret value
			PUSH 0[0]	# push k as second param
			CONSTI -1	# push -1 as first param
			CALL 0, __pow_int_int
			ADJUST -2	# kick params off the stack
			POP 1[0]	# save (-1)^k back into local vars

			#next calculate (2k)!
			CONSTR 0.0	# make room for ret value
			PUSH 0[0]	# push k onto stack
			CONSTI 2	# push 2 onto stack
			MULI		# top of stack <-- 2*k
			CALL 0, __factorial
			ADJUST -1	# kick param off stack
			POP 2[0]	# save (2k)! back into local vars

			# next we calculate x^(2k)
			CONSTR 0.0	# make room for ret value
			PUSH 0[0]	# push k onto stack
			CONSTI 2	# push 2 onto stack
			MULI		# top of stack <-- 2*k
			PUSH -3[0]	# push x onto stack
			CALL 0, __pow_real_int
			ADJUST -2	# kick local vars off the stack
			POP 3[0]	# save val back into local vars

			# we're finally ready to calculate the summand
			PUSH 1[0]	# push (-1)^k
			PUSH 2[0]	# push (2k)!
			DIVR		# top of stack <-- (-1)^k/(2k)!
			PUSH 3[0]	# push x^(2k)
			MULR		# top of stack <-- summand
			PUSH 4[0]	# push sum so far onto stack
			ADDR		# add summand to sum so far
			POP 4[0]	# save sum so far
			GOTO __cos_loop

__cos_done		PUSH 4[0]	# push sum so far onto stack
			POP -4[0]	# save it as ret value
			ADJUST -5	#kick local vars off the stack
			GOTO __cos_ret
__cos_ret		RET 0


###############################################################################
# arctan(x) - returns the value of the arctan of x where x is in radians.
# We're going to approximate the value of arctan by calculating "enough" terms
# of its Taylor series.
# TODO: only works for small values of x!  need more general solution :(
###############################################################################

__arctan_int		PUSH -3[0]	# push x onto stack
			ITOR		# conver to real
			POP -3[0]	# push into param slot
			GOTO __arctan_real # "call" real valued version of sin()

__arctan_real		ADJUST 1	# make room for k = summation index
					# in the taylor series for sine
			CONSTI 6	# We are going to sum the first 6
					# series
			POP 0[0]

			ADJUST 1	# make room for (-1)^k
			CONSTR 0.0	
			POP 1[0]	# set (-1)^k = 0 for now

			ADJUST 1	# make room for (2k + 1)
			CONSTR 0.0
			POP 2[0]	# set it to zero for now

			ADJUST 1	# make room for x^(2k+1) and set to 0
			CONSTR 0.0
			POP 3[0]

			# make room for value of sum so far, set to 0
			ADJUST 1	
			CONSTR 0.0
			POP 4[0]

			GOTO __arctan_loop

__arctan_loop		PUSH 0[0]	# push k onto stack
			CONSTI -1	# push -1 onto stack
			ADDI		# k <- k-1
			POP 0[0]	# save new value of k
			PUSH 0[0]	# push k onto stack
			CONSTI 0	# push 0 onto stack
			LTI
			IFNZ __arctan_done	# k < 0 => we are done
			# else, we calculate the next summand

			#first calculate (-1)^k, make call to __pow_int_int
			CONSTR 0.0	# make room for ret value
			PUSH 0[0]	# push k as second param
			CONSTI -1	# push -1 as first param
			CALL 0, __pow_int_int
			ADJUST -2	# kick params off the stack
			POP 1[0]	# save (-1)^k back into local vars
			#next calculate (2k + 1)
			PUSH 0[0]	# push k onto stack
			CONSTI 2	# push 2 onto stack
			MULI		# top of stack <-- 2*k
			CONSTI 1	# push 1 onto stack
			ADDI		# top of stack <-- 2*k + 1
			ITOR		# make 2*k + 1 a real
			POP 2[0]	# save (2k+1) back into local vars
			# next we calculate x^(2k+1)
			CONSTR 0.0	# make room for ret value
			PUSH 0[0]	# push k onto stack
			CONSTI 2	# push 2 onto stack
			MULI		# top of stack <-- 2*k
			CONSTI 1	# push 1 onto stack
			ADDI		# top of stack <-- 2k+1
			PUSH -3[0]	# push x onto stack
			CALL 0, __pow_real_int
			ADJUST -2	# kick local vars off the stack
			POP 3[0]	# save val back into local vars
			# we're finally ready to calculate the summand
			PUSH 1[0]	# push (-1)^k
			PUSH 2[0]	# push (2k + 1)
			DIVR		# top of stack <-- (-1)^k/(2k+1)
			PUSH 3[0]	# push x^(2k+1)
			MULR		# top of stack <-- summand
			PUSH 4[0]	# push sum so far onto stack
			ADDR		# add summand to sum so far
			POP 4[0]	# save sum so far
			GOTO __arctan_loop

__arctan_done		PUSH 4[0]	# push sum so far onto stack
			POP -4[0]	# save it as ret value
			ADJUST -5	#kick local vars off the stack
			GOTO __arctan_ret
__arctan_ret		RET 0



################################################################################
# simple tests
################################################################################
test_start		ADJUST 1
			CONSTI 0
			POP 0[0]
			CONSTI 0	# make room for ret
			CONSTI 2	# param n onto stack
			CONSTI 2	# param x onto stack
			CALL 0, __pow_int_int
			ADJUST -2	# kick params of stack
			WRITER		# write result
			CONSTI 10
			WRITEC
			
			# test with n = 10, x = 10.0
			CONSTI 0	# make room for ret
			CONSTI 10	# param n onto stack
			CONSTR 10.0	# param x onto stack
			CALL 0, __pow_real_int
			ADJUST -2	# kick params of stack
			WRITER		# write result
			CONSTI 10
			WRITEC

			# test with n = 4, x = -3.49
			# desk calculator says answer should be 148.354
			CONSTI 0	# make room for ret
			CONSTI 4	# param n onto stack
			CONSTR -3.49	# param x onto stack
			CALL 0, __pow_real_int
			ADJUST -2	# kick params of stack
			WRITER		# write result
			CONSTI 10
			WRITEC

			# test factorial(n) with n = 4
			CONSTI 0	# make room for ret
			CONSTI 4	# param n onto stack
			CALL 0,__factorial
			ADJUST -1	# kick params of stack
			WRITER		# write result
			CONSTI 10
			WRITEC

			# test factorial(n) with n = 0
			CONSTI 0	# make room for ret
			CONSTI 0	# param n onto stack
			CALL 0,__factorial
			ADJUST -1	# kick params of stack
			WRITER		# write result
			CONSTI 10
			WRITEC

			# test factorial(n) with n = 11
			# internet sez the value is 39916800
			CONSTI 0	# make room for ret
			CONSTI 11	# param n onto stack
			CALL 0,__factorial
			ADJUST -1	# kick params of stack
			WRITER		# write result
			CONSTI 10
			WRITEC

			# test sin(x) with x ~ pi/3
			# should return ~ 0.866
			CONSTI 0	#make room for ret
			CONSTR 1.047197	# param ~ pi/3
			CALL 0, __sin_real
			ADJUST -1
			WRITER
			CONSTI 10
			WRITEC

			# test cos(x) with x ~ pi/3
			# should return ~ 0.5
			CONSTI 0	#make room for ret
			CONSTR 1.047197	# param ~ pi/3
			CALL 0, __cos_real
			ADJUST -1
			WRITER
			CONSTI 10
			WRITEC

			# test arctan(x) with x = .4 radians
			# should return ~ .380506
			CONSTI 0
			CONSTR 0.4
			CALL 0, __arctan_real
			ADJUST -1
			WRITER
			CONSTI 10
			WRITEC

			STOP
