# ASC implementation of the succ(x) function.
# From the expression x that shall be of an ordinal-type, this function shall
# return a result that shall be of the same type as that of the expression x.
# The function shall yield a value whose ordinal number is one greater than that
# of the expression x, if such a value exists.  It shall be an error if such a 
# value does not exist.
#

__succ_int		PUSH -3[0]	# push x onto the stack
			# TODO: make sure x < maxint
			CONSTI		# push 1 onto stack
			ADDI		# top of stack <-- x + 1
			POP -4[0]	# store x+1 as ret value
			RET 0				

__succ_int_err		# the integer give was == maxint, cannot get successor
			STOP

__succ_bool		PUSH -3[0]
			IFNZ __succ_bool_err	# bool > 0 => no successor
			CONSTI 1	# push 1 onto stack
			POP -4[0]	# make 1 ret value
			RET 0

__succ_bool_err		# print error message
			STOP

# The standard indicates that we are to assume that the value passed
# to succ is of ordinal type, so we do not need to check if value of char
# passed is itself a valid char value (although we sort of do anyway).
__succ_char		PUSH -3[0]	# push x onto stack
			CONSTI 57	# push ascii val of '9' onto stack
			EQI		# if x == '9', need ret = 'A', else
					# check if x is next boundary value 'Z' 
			IFZ __succ_char_Z
			CONSTI 65
			POP -4[0]
			GOTO __succ_char_ret

__succ_char_Z		PUSH -3[0]
			CONSTI 90	# push ascci val of 'Z' onto stack
			EQI		# if x = 'Z', ret 'a', else check if
					# x is next boundary value 'z'
			IFZ __succ_char_z
			CONSTI 97
			POP -4[0]
			GOTO __succ_char_ret

__succ_char_z		PUSH -3[0]
			CONSTI 122
			EQI
			# if x == 'z', we have an error (no successor)
			IFNZ __succ_char_err
			# else, x was not a boundary value, just increment
			# it and return
			GOTO __succ_char_incr

__succ_char_incr	PUSH -3[0]
			CONSTI 1
			ADDI
			POP -4[0]
			GOTO __succ_char_ret

__succ_char_ret		RET 0	

__succ_char_error 	# no successor
			STOP

# For scalar types we get to have even more fun.  Each item in an enumerated
# scalar type is represented internally as a const -- so that's easy to 
# increment.  The bit of extra work is that we need to also pass to succ() the
# largest value amongst the consts in the enumerated type (e.g., the number
# of elements in the enumerated scalara - 1, where we subtract 1 as the
# standard specifies that the values of the constants beings at 0).  This
# "largest" value will be passed as the second parameter to __succ_scalar
__succ_scalar		PUSH -3[0]	# push x onto the stack
			PUSH -4[0]	# push x_max onto the stack
			# We should only have to test for equality if we
			# are performing error checking correctly elsewhere
			# in the program
			EQI
			IFNZ __succ_scalar_err
			PUSH -3[0]
			CONSTI 1
			ADDI
			POP -5[0]
			RET 0
__succ_scalar_err	# print error message
			STOP


