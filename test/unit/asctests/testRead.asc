# ASC implementation of read()
# Calling convention:
#	- for ints and real, just push param as usual (i.e., param is the 
#	  address where the value read in is to be placed)
#	- for chars/strs, first param is the number of chars to read (e.g.,
#	  if we want to read(s) where s : array[1..10] of char, then the first
#	  param should be 10 and read() will assume -13[0] is the address
#	  into which to return the first char read (e.g., s[1])
# NOTE: check err flag after reading from input, if it does not get the type
# it is expecting then it is a run time error and the program will halt.

			GOTO test_start

__read_str		ADJUST 1	# make # of chars to read a local var
			PUSH -3[0]	
			POP 0[0]
			GOTO __read_str_loop

__read_str_loop		PUSH 0[0]	# top of stack <-- # char left to read
			IFZ __read_str_done
			# else we have more chars to read
			PUSH 0[0]
			CONSTI -1
			MULI
			CONSTI -3
			ADDI 		# top of stack <- offset to next param
			PUSHI 0		# push address param onto stack
			READC		# get char from stdin
			IFERR __read_str_err 
			DUP		# push extra copy of read in char onto
					# stack as we need to test it for
					# equality with newline
			CONSTI 10	# ascii val of newline char
			EQI		# see read in char == newline
			IFNZ __read_str_nl_done
			POPI 		# store read char at &x
			# decrement # of chars left to print
			PUSH 0[0]
			CONSTI -1
			ADDI
			POP 0[0]
			GOTO __read_str_loop

__read_str_nl_done	# stopped reading because we caugh a newline, so
			# we enter the value 0 into the address where we were
			# planning on storing the next character read then
			# we go away
			ADJUST -1	# kick newline of the stack
			!D
			CONSTI 0
			!D
			POPI 
			!D
			STOP
			GOTO __read_str_done

__read_str_done		ADJUST -1
			RET 0

__read_str_err		CONSTI 90	# TODO: print real error message
			WRITEC
			STOP



__read_int		PUSH -3[0]	# push &x onto stack
			READI		# read int from stdin
			IFERR __read_int_err
			POPI		# pop value read from stdin to
					# address specified by param
			RET 0		
			

__read_int_err		# TODO: produce error message
			CONSTI 90
			WRITEI
			STOP

__read_real		PUSH -3[0]	# push &x onto stack
			READR		# read real from stdin
			IFERR __read_real_err
			POPI		# pop value read from stdin to addr
					# specified by param
			RET 0		

__read_real_err		STOP 		# TODO print error

test_start		ADJUST 2
			CONSTI 0
			POP 0[0]
			CONSTI 1
			POP 1[0]
			PUSHA 0[0]	# push addr of first local onto stack
			CALL 0, __read_int
			ADJUST -1	# kick param off the stack
			WRITEI		# expect the value 1
			WRITEI		# expect the value that we gave to
					# stdin on read
			CONSTI 10
			WRITEC
			ADJUST 20
			PUSHA 0[0]
			PUSHA 1[0]
			PUSHA 2[0]
			PUSHA 3[0]
			PUSHA 4[0]
			PUSHA 5[0]
			PUSHA 6[0]
			PUSHA 7[0]
			PUSHA 8[0]
			PUSHA 9[0]
			PUSHA 10[0]
			PUSHA 11[0]
			PUSHA 12[0]
			PUSHA 13[0]
			PUSHA 14[0]
			PUSHA 15[0]
			PUSHA 16[0]
			PUSHA 17[0]
			PUSHA 18[0]
			PUSHA 19[0]
			CONSTI 20
			CALL 0, __read_str
			!D		# check that it worked
			STOP
